package com.versa.tr;

import android.animation.*;
import android.app.*;
import android.content.*;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.res.*;
import android.graphics.*;
import android.graphics.Typeface;
import android.graphics.drawable.*;
import android.media.*;
import android.net.*;
import android.os.*;
import android.text.*;
import android.text.style.*;
import android.util.*;
import android.view.*;
import android.view.View.*;
import android.view.animation.*;
import android.webkit.*;
import android.widget.*;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.*;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import com.google.firebase.FirebaseApp;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.*;
import java.text.*;
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.*;
import org.json.*;

public class JavalodlariActivity extends AppCompatActivity {
	
	private String path = "";
	
	private ArrayList<HashMap<String, Object>> map = new ArrayList<>();
	
	private LinearLayout linear1;
	private TextView textview1;
	private ListView listview1;
	
	@Override
	protected void onCreate(Bundle _savedInstanceState) {
		super.onCreate(_savedInstanceState);
		setContentView(R.layout.javalodlari);
		initialize(_savedInstanceState);
		FirebaseApp.initializeApp(this);
		initializeLogic();
	}
	
	private void initialize(Bundle _savedInstanceState) {
		linear1 = findViewById(R.id.linear1);
		textview1 = findViewById(R.id.textview1);
		listview1 = findViewById(R.id.listview1);
	}
	
	private void initializeLogic() {
		_codes();
		listview1.setSelector(android.R.color.transparent);
		textview1.setTypeface(Typeface.createFromAsset(getAssets(),"fonts/poppins.ttf"), 1);
	}
	
	public void _codes() {
		path = "[{\"code\":\"textview1.setTextIsSelectable(true);\",\"title\":\"Text Select Code\"},{\"code\":\"getSupportActionBar().hide();\",\"title\":\"Action bar/Tool bar (Hide)\"},{\"code\":\"textview1.setTextColor(Color.parseColor(\\\"#000000\\\"));\",\"title\":\"Text Colour Code\"},{\"code\":\"            Color Code\nWhite              #FFFFFF\nBlack              #000000\nRed                #F44336\nBlue              #2196F3\nOrange         #FF9800\nYellow          #FFEB3B\nPurple          #9C27B0\nPink             #E91E63\nCyan            #00BCD4\nTeal             #009688\nGreen         #4CAF50\nBrown        #795548\nGrey           #9E9E9E\",\"title\":\"Color Codes\"},{\"code\":\"Intent i \\u003d new Intent(android.content.Intent.ACTION_SEND);i.setType(\\\"text/plain\\\"); i.putExtra(android.content.Intent.EXTRA_TEXT,share); startActivity(Intent.createChooser(i,\\\"share using\\\"));\",\"title\":\"Text to Share Code\"},{\"code\":\"try {android.content.pm.PackageInfo pinfo \\u003d getPackageManager().getPackageInfo(package_name, android.content.pm.PackageManager.GET_ACTIVITIES);ver \\u003d pinfo.versionName; }catch (Exception e){ showMessage(e.toString()); }\n\n create a two Variables (String)\n(1)package_name\n(2)ver\ndon\\u0027t change this Variables\n\",\"title\":\"Get app Version Code\"},{\"code\":\"mp \\u003d \nMediaPlayer.create(getApplicationContext(),Uri.fromFile(new\njava.io.File(songs)));\n\nCreate one variable\n(1) songs\n\nAnd Create a Media player name\n( mp )\",\"title\":\"Media player onCreate block\"},{\"code\":\"(1) theme Code\ndialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_TRADITIONAL);\n\n(2) theme Code\ndialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_DARK);\n\n(3) theme Code\ndialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_HOLO_LIGHT);\n\n{1} Set dialog text color\nsetTheme(android.R.style.Theme_Material);\n\n{2} Set dialog text color\nsetTheme(android.R.style.Theme_Material_Light);\n\n(4) theme Code\ndialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_DARK);\n\n(5) theme Code\ndialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);\n\n \nCreate a dialog\ndialog\",\"title\":\"Dialog themes\"},{\"code\":\"getActionBar().setSubtitle(\\\"string\\\");\n\n Create a one variable string\n(1) string\",\"title\":\"Subtitle Code\"},{\"code\":\"Dialog.setIcon(R.drawable.image name_here);\",\"title\":\"Set a dialog icon\"},{\"code\":\"url \\u003d \\\"android.resource://\\\" +\ngetPackageName() + \\\"/raw/image name\\\";\n\n\nCreate a variable\n(1) url\",\"title\":\"Set gif image\"},{\"code\":\"Notification.Builder mBuilder \\u003d new Notification.Builder(MainActivity.this);mBuilder.setSmallIcon(R.drawable.default_image);mBuilder.setContentTitle(_title);mBuilder.setContentText(_message);NotificationManager notificationManager \\u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);int onx \\u003d 1;notificationManager.notify(onx, mBuilder.build());\n\n-------------------------------------\nCreate a more block\",\"title\":\"Create a Notification\"},{\"code\":\"Window w \\u003d MainActivity.this.getWindow();w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); w.setStatusBarColor(Color.parseColor(\\\"#FFFFFF\\\"));\",\"title\":\"Set Status bar Color\"},{\"code\":\" Bitmap bMap \\u003d ThumbnailUtils.createVideoThumbnail(file, android.provider.MediaStore.Video.Thumbnails.MICRO_KIND);\n \nimageview1.setImageBitmap(bMap);\n \n\",\"title\":\"Get a video thumbnail\"},{\"code\":\"Drawer Textview\n_drawer_textview1.setVisibility(View.VISIBLE);\n\n_drawer_textview1.setVisibility(View.GONE);\n\nTextview\ntextview1.setVisibility(View.VISIBLE);\n\ntextview1.setVisibility(View.GONE);\",\"title\":\"Set Text view Visibility\"},{\"code\":\"finishAffinity();\",\"title\":\"finish Activity\"},{\"code\":\"checkbox1.setButtonDrawable(R.drawable.iconname);\",\"title\":\"Checkbox icon\"},{\"code\":\"ViewGroup parentLayout \\u003d (ViewGroup) ((ViewGroup) this .findViewById(android.R.id.content)).getChildAt(0);\n   android.support.design.widget.Snackbar.make(parentLayout, _message, android.support.design.widget.Snackbar.LENGTH_LONG) \n        .setAction(\\\"OK\\\", new View.OnClickListener() {\n            @Override \n            public void onClick(View view) {\n\n            } \n        }).show();\n\n+++++++++++++++++++++++++\nMoreBlock\n\nBlock Name..\n\ncreateSnackBar\n\nAdd variable...(string)\n\n message\n\",\"title\":\"Create a snackbar toast\"},{\"code\":\"final EditText edittxt1 \\u003d new EditText(MainActivity.this);\nedittxt1.setText(\\\"name\\\");\ndialog.setView(edittxt1);\n\n*************************************\nString \\u003d edittxt1.getText().toString();\n\ndialog name ( dialog ) same\n\",\"title\":\"Edittext in Dialog\"},{\"code\":\"//Password Hide code\nedittext1.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance());\n\n\n//Password Show code\nedittext1.setTransformationMethod(android.text.method.HideReturnsTransformationMethod.getInstance());\",\"title\":\"Password show/hide\"},{\"code\":\"Source Code 1 :-\n android.support.design.widget.BottomNavigationView btm\\u003d new android.support.design.widget.BottomNavigationView(this); btm.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)); linear1.addView(btm); linear1.setElevation(16); Menu menu \\u003d btm.getMenu();\nmenu.add(0, 0, 0, \\\"Home\\\").setIcon(R.drawable.home); menu.add(0, 1, 0, \\\"Codes\\\").setIcon(R.drawable.code); menu.add(0, 2, 0, \\\"Projects\\\").setIcon(R.drawable.project); menu.add(0, 3, 0, \\\"Tutorials\\\").setIcon(R.drawable.tutorial); menu.add(0, 4, 0, \\\"Fonts\\\").setIcon(R.drawable.font);\n\n Source Code 2 :- btm.setOnNavigationItemSelectedListener(new android.support.design.widget.BottomNavigationView.OnNavigationItemSelectedListener() { @Override public boolean onNavigationItemSelected(final MenuItem item) { switch (item.getItemId()){ case 0:\n\n break; case 1:\n\n break; case 2:\n\n break; case 3:\n\n break; case 4:\n\n break; } return true; } });\",\"title\":\"Bottom Navigation bar\"},{\"code\":\"Animation animation; animation \\u003d AnimationUtils.loadAnimation( getApplicationContext(), android.R.anim.slide_in_left ); animation.setDuration(200); linear1.startAnimation(animation); animation \\u003d null;\",\"title\":\"Listview Animation\"},{\"code\":\"linear1.setGravity(Gravity.RIGHT);\n\nlinear1.setGravity(Gravity.LEFT);\",\"title\":\"Set Gravity\"},{\"code\":\"WallpaperManager myWallpaperManager \\u003d WallpaperManager.getInstance(getApplicationContext()); try{ myWallpaperManager.setResource(R.drawable.wallpaper name); }catch (Exception g) { g.printStackTrace(); } \n\",\"title\":\"set wallpaper of screen\"},{\"code\":\"this is code for moreblock\n\n_view.setElevation((int)_number);\n********************************\n//and this is normal code\n\nlinear1.setElevation(10f);\",\"title\":\"linear shadow\"},{\"code\":\"textview1.setShadowLayer(3,1,1, Color.GREEN);\n\ncolor name Capital \nExample:\nNLACK  GREEN   YELLOW\nBLUE  Etc\",\"title\":\"Text Shadow\"},{\"code\":\"more block use more block name\n(1) MENU\n \nAdd source 1\n}\n@Override\npublic boolean onCreateOptionsMenu (Menu menu){\nmenu.add(0, 0, 0, \\\"Copy Text\\\");\nmenu.add(0, 1, 1, \\\"Copy Title\\\");\nmenu.add(0, 2, 2, \\\"Word Count\\\");\nreturn true;\n}\n @Override\npublic boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()){\ncase 0:\n\nAdd source 2\nbreak;\ncase 1:\n\nAdd source 3\n\nbreak;\ncase 2:\n\nAdd source 4\n\nbreak;\n}\nreturn super.onOptionsItemSelected(item);\",\"title\":\"Create a share menu\"},{\"code\":\"add source 1\n}\\r\n@Override\\r\npublic boolean onCreateOptionsMenu (Menu menu){\nmenu.add(0, 0, 0, \\\"Info\\\").setIcon(R.drawable.ICON NAME).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\nreturn true;\\r\n}\\r\n@Override\\r\npublic boolean onOptionsItemSelected(MenuItem item){\\r\nswitch (item.getItemId()){\\r\ncase 0:\n\nadd source 2\n\nbreak;\\r\n}\\r\nreturn super.onOptionsItemSelected(item);\",\"title\":\"Actionbar show to icon\"},{\"code\":\"Intent startupIntent \\u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \\u003d getPackageManager(); \t\tList\\u003candroid.content.pm.ResolveInfo\\u003e activities \\u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\\u003candroid.content.pm.ResolveInfo\\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \\u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e adapter \\u003d new ArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) { TextView tv \\u003d new TextView(MainActivity.this);  \t\t\t\tandroid.content.pm.ResolveInfo ri \\u003d getItem(pos);  \t\t\ttv.setText(ri.loadLabel(pm));  \tLinearLayout lin \\u003d new LinearLayout(MainActivity.this);ImageView iv \\u003d new ImageView(MainActivity.this);iv.setImageDrawable(ri.loadIcon(pm));lin.addView(iv);lin.addView(tv);tv.setGravity(Gravity.CENTER_VERTICAL);tv.setPadding(16,0,0,0);tv.setTextSize(16);tv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT ));LinearLayout.LayoutParams p \\u003d\tnew LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);p.width \\u003d 70;p.height \\u003d 70;p.bottomMargin \\u003d 4;p.topMargin \\u003d 4;iv.setLayoutParams(p);lin.setPadding(6,6,6,6);return lin;  \t\t\t}  \t\t};  \t\tlistview1.setAdapter(adapter); \t\t \t\tlistview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \\u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \\u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \\u003d\\u003d null) return;  \t\t\t\t\tIntent i \\u003d new Intent(Intent.ACTION_MAIN);  \t\t\t\t\ti.setClassName(activityInfo.applicationInfo.packageName, activityInfo.name);  \t\t\t\t\tstartActivity(i); \t\t\t\t}  \t\t\t \t\t});;\",\"title\":\"App list with icon (installed)\"},{\"code\":\"Intent startupIntent \\u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \\u003d getPackageManager(); \t\tList\\u003candroid.content.pm.ResolveInfo\\u003e activities \\u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\\u003candroid.content.pm.ResolveInfo\\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \\u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e adapter \\u003d new ArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) { TextView tv \\u003d new TextView(MainActivity.this);  \t\t\t\tandroid.content.pm.ResolveInfo ri \\u003d getItem(pos);  \t\t\ttv.setText(ri.loadLabel(pm));  \tLinearLayout lin \\u003d new LinearLayout(MainActivity.this);ImageView iv \\u003d new ImageView(MainActivity.this);iv.setImageDrawable(ri.loadIcon(pm));lin.addView(iv);lin.addView(tv);tv.setGravity(Gravity.CENTER_VERTICAL);tv.setPadding(16,0,0,0);tv.setTextSize(16);tv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT ));LinearLayout.LayoutParams p \\u003d\tnew LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);p.width \\u003d 70;p.height \\u003d 70;p.bottomMargin \\u003d 4;p.topMargin \\u003d 4;iv.setLayoutParams(p);lin.setPadding(6,6,6,6);return lin;  \t\t\t}  \t\t};  \t\tlistview1.setAdapter(adapter); \t\t \t\tlistview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \\u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \\u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \\u003d\\u003d null) return;  \t\t\t\t\tUri packageURI \\u003d Uri.parse(\\\"package:\\\".concat(activityInfo.applicationInfo.packageName)); Intent uninstallIntent \\u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent); \t\t\t\t}  \t\t\t \t\t});;\",\"title\":\"App list with icon (Uninstalled)\"},{\"code\":\"Intent startupIntent \\u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \\u003d getPackageManager(); \t\tList\\u003candroid.content.pm.ResolveInfo\\u003e activities \\u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\\u003candroid.content.pm.ResolveInfo\\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \\u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e adapter \\u003d new ArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) {  \t\t\t\tView v \\u003d super.getView(pos, convertView, parent);  \t\t\t\tTextView tv \\u003d (TextView)v;  \t\t\t\tandroid.content.pm.ResolveInfo ri \\u003d getItem(pos);  \t\t\t\ttv.setText(ri.loadLabel(pm));  \t\t\t\treturn v;  \t\t\t}  \t\t};  \t\tlistview1.setAdapter(adapter); \t\t \t\tlistview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \\u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \\u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \\u003d\\u003d null) return;  \t\t\t\t\tIntent i \\u003d new Intent(Intent.ACTION_MAIN);  \t\t\t\t\ti.setClassName(activityInfo.applicationInfo.packageName, activityInfo.name);  \t\t\t\t\tstartActivity(i); \t\t\t\t}  \t\t\t \t\t});;\",\"title\":\"App list without icon (Uninstalled)\"},{\"code\":\"Intent startupIntent \\u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \\u003d getPackageManager(); \t\tList\\u003candroid.content.pm.ResolveInfo\\u003e activities \\u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\\u003candroid.content.pm.ResolveInfo\\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \\u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e adapter \\u003d new ArrayAdapter\\u003candroid.content.pm.ResolveInfo\\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) {  \t\t\t\tView v \\u003d super.getView(pos, convertView, parent);  \t\t\t\tTextView tv \\u003d (TextView)v;  \t\t\t\tandroid.content.pm.ResolveInfo ri \\u003d getItem(pos);  \t\t\t\ttv.setText(ri.loadLabel(pm));  \t\t\t\treturn v;  \t\t\t}  \t\t};  \t\tlistview1.setAdapter(adapter); \t\t \t\tlistview1.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \\u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \\u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \\u003d\\u003d null) return;  \t\t\t\t\tIntent i \\u003d new Intent(Intent.ACTION_MAIN);  \t\t\t\t\ti.setClassName(activityInfo.applicationInfo.packageName, activityInfo.name);  \t\t\t\t\tstartActivity(i); \t\t\t\t}  \t\t\t \t\t});;\",\"title\":\"App list without icon (installed)\"},{\"code\":\"android.graphics.drawable.GradientDrawable gd \\u003d new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.RIGHT_LEFT, new int[]{\n0xFFFDBE00,\n0xFFF44336\n});\ngd.setCornerRadius(20f);\nlinear2.setElevation(6f);\nlinear2.setBackgroundDrawable(gd);\",\"title\":\"Grandview\"},{\"code\":\"Add source 1\n\nPopupMenu popup \\u003d new PopupMenu(ChatActivity.this, imageview1);\n\nMenu menu \\u003d popup.getMenu();\n\nmenu.add(\\\"Copy\\\");\nmenu.add(\\\"Edit\\\");\nmenu.add(\\\"Share\\\");\nmenu.add(\\\"Delete\\\");\n\nAdd source 2\n\npopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\npublic boolean onMenuItemClick(MenuItem item) {\nswitch (item.getTitle().toString()) {\ncase \\\"Copy\\\":\n\nAdd source 3\ncase \\\"Edit\\\":\n\nAdd source 4\ncase \\\"Share\\\":\n\nAdd source 5\ncase \\\"Delete\\\":\n\n\nAdd source 6\ndefault: return false;\n}\n}\n});\n\n\npopup.show();\n\",\"title\":\"Create popup menu\"},{\"code\":\"Add source 1\n\n}\\r\n@Override\\r\npublic boolean onCreateOptionsMenu (Menu menu){\nmenu.add(0, 0, 0, \\\"Info\\\").setIcon(R.drawable.ic_info_outline_white).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\nreturn true;\\r\n}\\r\n@Override\\r\npublic boolean onOptionsItemSelected(MenuItem item){\\r\nswitch (item.getItemId()){\\r\ncase 0:\n\nAdd source 2\nbreak;\\r\n}\\r\nreturn super.onOptionsItemSelected(item);\n\",\"title\":\"Create Profile menu\"},{\"code\":\"LayoutInflater inflater \\u003d getLayoutInflater(); View toastLayout \\u003d inflater.inflate(R.layout.custom2, null);\n\nTextView textview1 \\u003d (TextView) toastLayout.findViewById(R.id.textview1);\ntextview1.setText(_text);\nLinearLayout linear1 \\u003d (LinearLayout) toastLayout.findViewById(R.id.linear1);\n\nandroid.graphics.drawable.GradientDrawable gd \\u003d new android.graphics.drawable.GradientDrawable();\ngd.setColor(Color.parseColor(\\\"#FFFFFF\\\"));\ngd.setCornerRadius(20);\ngd.setStroke(3, Color.parseColor(\\\"#2196F3\\\"));\nlinear1.setBackground(gd);\n\nToast toast \\u003d new Toast(getApplicationContext()); toast.setDuration(Toast.LENGTH_SHORT);\ntoast.setView(toastLayout);\ntoast.show();\",\"title\":\"Custom Toast\"},{\"code\":\"getActionBar().setTitle(Html.fromHtml(\\\"\\u003cfont color\\u003d\\\\\\\"#\\\"+_color+\\\"\\\\\\\"\\u003e\\\"+_title+\\\"\\u003c/font\\u003e\\\"));\",\"title\":\"Toolbar title color\"},{\"code\":\"getActionBar().setSubtitle(Html.fromHtml(\\\"\\u003cfont color\\u003d\\\\\\\"#\\\"+_color+\\\"\\\\\\\"\\u003e\\\"+_message+\\\"\\u003c/font\\u003e\\\"));\",\"title\":\"Toolbar Subtitle color\"},{\"code\":\"_dialog.setTitle(Html.fromHtml(\\\"\\u003cfont color\\u003d\\\\\\\"#\\\"+_color+\\\"\\\\\\\"\\u003e\\\"+_title+\\\"\\u003c/font\\u003e\\\"));\",\"title\":\"Dialog title color\"},{\"code\":\"_dialog.setMessage(Html.fromHtml(\\\"\\u003cfont color\\u003d\\\\\\\"#\\\"+_color+\\\"\\\\\\\"\\u003e\\\"+_message+\\\"\\u003c/font\\u003e\\\"));\",\"title\":\"Dialog message color\"},{\"code\":\"Toast toast \\u003d Toast.makeText(MainActivity.this, _msg, 3000);\nView view \\u003d toast.getView();\nTextView text \\u003d (TextView) view.findViewById(android.R.id.message);\ntext.setTextColor(Color.parseColor(_txtColor));\nandroid.graphics.drawable.GradientDrawable s \\u003d new android.graphics.drawable.GradientDrawable(); s.setColor(Color.parseColor(_bdcolor));\ns.setStroke(2, Color.parseColor(_skcolor));\ns.setCornerRadius((int)_rad);\nview.setBackground(s);\nview.setElevation(5);\ntoast.show();\",\"title\":\"Modern Toast\"},{\"code\":\"Toast.makeText(getApplicationContext(),\\\"Created by Saleman Shah\\\",Toast.LENGTH_LONG).show();\",\"title\":\"Simple Toast\"},{\"code\":\"_txt.setClickable(true);\nandroid.text.util.Linkify.addLinks(_txt, android.text.util.Linkify.ALL);\n_txt.setLinkTextColor(Color.parseColor(\\\"#1E88E5\\\"));\n_txt.setLinksClickable(true);\n\n*********************************\nCreate MoreBlock\n\nBlock Name..\n\ndetect_links_\n\nAdd veriable...(view)(Textview)\n\ntxt\n\n\n\",\"title\":\"Detect links\"},{\"code\":\"android.graphics.drawable.GradientDrawable wd \\u003d new android.graphics.drawable.GradientDrawable();\nwd.setColor(Color.parseColor(_wc));\nwd.setCornerRadius((int)_cru);\n_widgets.setElevation((int)_sadw);\n_widgets.setBackground(wd);\",\"title\":\"Reduis linear Corner\"},{\"code\":\"{ \\\"rules\\\": { \\\".read\\\": \\\"auth !\\u003d null\\\", \\\".write\\\": \\\"auth !\\u003d null\\\" } }\",\"title\":\"firebase database full security rules\"},{\"code\":\"morebook\n\n_view.setError(_message);\n\nAdd Source\nedittext1.setError(\\\"Enter your email\\\");\",\"title\":\"Edittext Error message\"},{\"code\":\"android.content.res.ColorStateList clr \\u003d new android.content.res.ColorStateList(new int[][]{new int[]{}},new int[]{Color.parseColor(_c)}); android.graphics.drawable.RippleDrawable ripdr \\u003d new android.graphics.drawable.RippleDrawable(clr, null, null); _view.setBackground(ripdr);\n\n************\non morebolck\",\"title\":\"Ripple effect\"},{\"code\":\"android.graphics.drawable.GradientDrawable gd \\u003d new android.graphics.drawable.GradientDrawable();\ngd.setColor(android.R.color.transparent);\ngd.setCornerRadius(360);\n_imageview.setClipToOutline(true);\n_imageview.setBackground(gd);\n\non More block\",\"title\":\"image Corner Radius\"},{\"code\":\"Glide.with(getApplicationContext()).load(foto).into(_drawer_imageview3);\n\nandroid.graphics.drawable.GradientDrawable gd \\u003d new android.graphics.drawable.GradientDrawable();\ngd.setColor(android.R.color.transparent);\ngd.setCornerRadius(360);\n_drawer_imageview3.setClipToOutline(true);\n_drawer_imageview3.setBackground(gd);\n\nCreate a String variable\n(1) poto\",\"title\":\"Drawer image Corner Radius\"},{\"code\":\"_drawer_textview1.setText(email);\n\nCreate a String variable\n(1) email\",\"title\":\"Drawer show Textview\"},{\"code\":\"Add source 1\nfinal AlertDialog dialog \\u003d new AlertDialog.Builder(MianActivity.this).create();\n\nAdd source 2\nView inflate \\u003d getLayoutInflater ().inflate(R.layout.prog, null);\ndialog.setView(inflate);\n\nAdd source 3\ndialog.setCancelable(true);\n\nAdd source 4\ndialog.show();\",\"title\":\"Custom Dialog\"},{\"code\":\"textview1.setAllCaps(true);\",\"title\":\"Textview to Captail words\"},{\"code\":\"textview1.setTextSize((float)14);\",\"title\":\"Text size\"},{\"code\":\"android.graphics.drawable.GradientDrawable CBCJGJE \\u003d new android.graphics.drawable.GradientDrawable();\nCBCJGJE.setColor(Color.parseColor(_c));\nCBCJGJE.setCornerRadius((int)_r);\nCBCJGJE.setStroke((int)_s, Color.parseColor(_sc));\n_view.setBackground(CBCJGJE);\",\"title\":\"linear Corner Radius / Stroke Code\"},{\"code\":\"DisplayMetrics dm \\u003d new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(dm); int width \\u003d dm.widthPixels; int height \\u003d dm.heightPixels;\n\n_textview.setText( \\\"SERIAL: \\\" + Build.SERIAL + \\\"\\\n\\\n\\\" + \\\"MODEL: \\\" + Build.MODEL + \\\"\\\n\\\n\\\" + \\\"ID: \\\" + Build.ID + \\\"\\\n\\\n\\\" + \\\"Manufacture: \\\" + Build.MANUFACTURER + \\\"\\\n\\\n\\\" + \\\"Brand: \\\" + Build.BRAND + \\\"\\\n\\\n\\\" +\n\\\"Device Language: \\\" + Locale.getDefault().getDisplayLanguage() + \\\"\\\n\\\n\\\" +\n\\\"Screen Resolution: \\\" + width + \\\"x\\\" + height + \\\"\\\n\\\n\\\" +\n\\\"Type: \\\" + Build.TYPE + \\\"\\\n\\\n\\\" + \\\"User: \\\" + Build.USER + \\\"\\\n\\\n\\\" + \\\"BASE: \\\" + Build.VERSION_CODES.BASE + \\\"\\\n\\\n\\\" + \\\"INCREMENTAL: \\\" + Build.VERSION.INCREMENTAL + \\\"\\\n\\\n\\\" + \\\"SDK: \\\" + Build.VERSION.SDK + \\\"\\\n\\\n\\\" + \\\"BOARD: \\\" + Build.BOARD + \\\"\\\n\\\n\\\" + \\\"BRAND: \\\" + Build.BRAND + \\\"\\\n\\\n\\\" + \\\"HOST: \\\" + Build.HOST + \\\"\\\n\\\n\\\" + \\\"FINGERPRINT: \\\"+Build.FINGERPRINT + \\\"\\\n\\\n\\\" + \\\"Version Code: \\\" + Build.VERSION.RELEASE );\n\ncreate a more block\n(1) mobile\ntextview\",\"title\":\"Mobile information\"},{\"code\":\"imageview1.getDrawable().setColorFilter(Color.parseColor(\\\"#CCCCCC\\\"), PorterDuff.Mode.SRC_IN);\",\"title\":\"image Color filter Code\"},{\"code\":\"url \\u003d\\\"https://google.com\\\";\n\n\nGlide.with(getApplicationContext()).load(Uri.parse(url)).into(imageview1);\n\nCreate a Variable String\n(1) url\",\"title\":\"image from url\"},{\"code\":\"Animation makeInAnimation \\u003d AnimationUtils.makeInAnimation(getBaseContext(), false);\nmakeInAnimation.setAnimationListener(new Animation.AnimationListener() {\n@Override\npublic void onAnimationEnd(Animation animation) { }\n\n@Override\npublic void onAnimationRepeat(Animation animation) { }\n\n@Override\npublic void onAnimationStart(Animation animation) {\n_view.setVisibility(View.VISIBLE);\n}\n});\n\nAnimation makeOutAnimation \\u003d AnimationUtils.makeOutAnimation(getBaseContext(), true);\nmakeOutAnimation.setAnimationListener(new Animation.AnimationListener() {\n@Override\npublic void onAnimationEnd(Animation animation) {\n_view.setVisibility(View.INVISIBLE);\n}\n\n@Override\npublic void onAnimationRepeat(Animation animation) { }\n\n@Override\npublic void onAnimationStart(Animation animation) { }\n});\n\nif (_view.isShown()) {\n_view.startAnimation(makeOutAnimation);\n}\n\nif (!_view.isShown()) {\n_view.startAnimation(makeInAnimation);\n}\n\nScaleAnimation animview \\u003d new ScaleAnimation(0,1,0,1);\nanimview.setFillBefore(true);\nanimview.setFillAfter(true);\nanimview.setFillEnabled(true);\nanimview.setDuration(1000);\nanimview.setInterpolator(new OvershootInterpolator());\n_view.startAnimation(animview);\",\"title\":\"linear Animation\"},{\"code\":\"getSupportActionBar().show();\",\"title\":\"Action bar/ Tool bar (show)\"},{\"code\":\"final LinearLayout _nav_view \\u003d (LinearLayout) findViewById(R.id._nav_view); _nav_view.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.TRANSPARENT));\",\"title\":\"Drawer Transparent  Code\"},{\"code\":\"final VideoView vd \\u003d new VideoView(WatchActivity.this);\nvd.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nlinear1.addView(vd);\nvd.setVideoURI(Uri.parse(string));\nvd.setMediaController(new MediaController(this));\nvd.requestFocus();\nvd.start();\n\nCreate a String variable\nname (string)\",\"title\":\"Play Offline Video\"},{\"code\":\"LinearLayout _nav_view \\u003d (LinearLayout) findViewById(R.id._nav_view);\n\nandroidx.drawerlayout.widget.DrawerLayout.LayoutParams params \\u003d (androidx.drawerlayout.widget.DrawerLayout.LayoutParams)_nav_view.getLayoutParams();\n\nparams.width \\u003d (int)getDip((int)_num);\n\nparams.height \\u003d androidx.drawerlayout.widget.DrawerLayout.LayoutParams.MATCH_PARENT;\n\n_nav_view.setLayoutParams(params);\n\nMorebolck use create a number\n(1) num\",\"title\":\"Drawer Size Codes\"},{\"code\":\"if (Build.VERSION.SDK_INT \\u003e Build.VERSION_CODES.LOLLIPOP) { \n   Window w \\u003d this.getWindow(); w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n   w.setStatusBarColor(Color.parseColor(_colour1)); w.setNavigationBarColor(Color.parseColor(_colour2));\n}\n\n\nCreate a Morebolck String variable\n(1) Color1\n(2) Color2\",\"title\":\"Change Status \\u0026 Bottom Navigation bar color\"},{\"code\":\"intent.addFlags(intent.FLAG_ACTIVITY_NO_ANIMATION);\",\"title\":\"No Intent Animation\"},{\"code\":\"Add Source 1\nListView listview1 \\u003d new ListView(this);\nLinearLayout.LayoutParams lp1 \\u003d new LinearLayout.LayoutParams(\nLinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);\nlistview1.setLayoutParams(lp1);\n\nlistview1.setAdapter(new ArrayAdapter(getBaseContext(), android.R.layout.simple_list_item_1, drawer_list));\n\n_drawer_linear2.addView(listview1);\n\nAdd source 2\nlistview1.setOnItemClickListener( new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick(\nAdapterView _parent, View _view, final int _position, long _id) {\nswitch (_position){\n\ncase 0:\n\nAdd Source 3\nbreak;\n\ncase 1:\n\nAdd Source 4\nbreak;\n\ncase 2:\n\nAdd Source 5\nbreak;\n\ncase 3:\n\nlist Add source 6\nbreak;\n}\n}});\",\"title\":\"Drawer listview\"},{\"code\":\"Add Source 1\nandroid.support.design.widget.TabLayout tabLayout \\u003d new android.support.design.widget.TabLayout(this);\n\ntabLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n\ntabLayout.setTabGravity(tabLayout.GRAVITY_FILL);\n\ntabLayout.setSelectedTabIndicatorColor(Color.parseColor(\\\"#ffffff\\\"));\ntabLayout.setTabTextColors(Color.parseColor(\\\"#ffffff\\\"), Color.parseColor(\\\"#ffffff\\\"));\n\ntabLayout.addTab(tabLayout.newTab().setText(\\\"Tab1\\\")); tabLayout.addTab(tabLayout.newTab().setText(\\\"Tab2\\\"));\n((android.support.design.widget.AppBarLayout) _toolbar.getParent()).addView(tabLayout);\ntabLayout.addOnTabSelectedListener(new android.support.design.widget.TabLayout.OnTabSelectedListener(){\n@Override\npublic void onTabSelected(android.support.design.widget.TabLayout.Tab tab){\nswitch(tab.getText().toString()){\ncase \\\"Tab1\\\":\n_tab1();\nbreak;\ncase \\\"Tab2\\\":\n_tab2();\nbreak;\n}\n}\n@Override\npublic void onTabReselected(android.support.design.widget.TabLayout.Tab tab){\n}\n@Override\npublic void onTabUnselected(android.support.design.widget.TabLayout.Tab tab){\n}\n});\n\n************************************\nCreate a three More Block\n(1) TabLouat\n(2) tab1\n(3) tab2\n\",\"title\":\"Tab Codes\"},{\"code\":\"_Dialog.setCancelable(_True);\n\nCreate a MoreBlock\",\"title\":\"Sticky Dialog\"},{\"code\":\"if (Build.VERSION.SDK_INT \\u003e\\u003d Build.VERSION_CODES.LOLLIPOP) {  Window w \\u003d this.getWindow();w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); w.setStatusBarColor(0xFF008375); w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); }\",\"title\":\"Status Bar Transparent\"},{\"code\":\"getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\",\"title\":\"Block ScreenShot\"},{\"code\":\"((ArrayAdapter)listview1.getAdapter()).getFilter().filter(edittext1.getText().toString());\",\"title\":\"Search on Listview\"},{\"code\":\" final ProgressDialog prog \\u003d new ProgressDialog(MainActivity.this);\nprog.setMax(100);\nprog.setTitle(\\\"Hello\\\");\nprog.setMessage(\\\"Message\\\");\nprog.setIndeterminate(true);\nprog.setCancelable(false);\nprog.show();\n\n******************************\nprog.hide();\",\"title\":\"Progress Dialog\"},{\"code\":\"RatingBar tp \\u003d new RatingBar(this); linear1.addView(tp);\",\"title\":\"Create Rating Bar\"},{\"code\":\"final DigitalClock dc \\u003d new DigitalClock(this);\nlinear1.addView (dc);\",\"title\":\"Digital clock Code\"},{\"code\":\"d: date of month without 0 prefix, e.g. 12.\n\ndd: date of month in two digits, e.g. 12.\n\nM: month in year, e.g. 7.\n\nMM: month in year in two digits, e.g. 07.\n\nMMM: month name in year displayed as three letter abbreviation, e.g. Jul.\n\nMMMM: month in year displayed as full month name, e.g. July.\n\nMMMMM: first letter of month name, e.g. J.\n\ny : year, e.g. 2017.\n\nyy: last two digits of year, e.g. 17.\n\nyyyy: year, e.g. 2017.\n\nh: hour in day in 12-hour format, e.g. 5.\n\nhh: hour in day in two digits, e.g. 05.\n\nH: hour in day in 24-hour format, e.g. 17.\n\nHH: hour in day 24-hour format in two digits.\n\nm: minutes in hour.\n\nmm: minutes in hour in two digits.\n\ns: seconds in minute.\n\nss: seconds in minute in two digits.\n\nS: displays 1/10 of second in second.\n\nSS: displays two digit 1/100 of second.\n\nSSS: displays milliseconds in second.\n\na: displays AM/PM.\n\nG: dispays era, e.g. AD.\n\nw: displays week in year.\n\nW: displays week in month.\n\nD: day in year.\n\nF: day of week in month, e.g. 2 for date given above as it is second wednesday in month.\n\nE: day name in abbreviation, e.g. Wed.\n\nEEE: day name in abbreviation, e.g. Wed.\n\nEEEE: full day name, e.g. Wednesday.\n\nEEEEE: first letter of day name, e.g. W.\n\nk: hour in day, same as H.\n\nK: hour in day in 12-hour format, same as h.\n\nz: time zone, e.g. GMT+05:30.\n\nZ: time zone, e.g. +0530.\n\nc: displays day name, same as E.\n\nL: month in year. Same as M.\n\n\",\"title\":\"Time formats Calendar Details\"},{\"code\":\"Time\n\nhh:mm:ss a \\u003d 12:23:30 AM or PM\nhh               \\u003d hours\nmm             \\u003d minutes\nss                \\u003d  seconds\na                   \\u003d AM or PM\n\nDate\n\ndd/MM/yy         \\u003d   8/5/19\ndd/MM/yyy       \\u003d   8/5/2020\ndd/MMM/yyy    \\u003d   8/Nov/2020\n\ndd             \\u003d  days\nMM           \\u003d months\nyy              \\u003d years\n\",\"title\":\"Time format\"},{\"code\":\"This is test ad mob I\\u0027d for app testing.\n\nBanner\nca-app-pub-3940256099942544/6300978111\n\nInterstitial\nca-app-pub-3940256099942544/1033173712\n\nRewarded Video\nca-app-pub-3940256099942544/5224354917\",\"title\":\"Test AD Mob ID\"},{\"code\":\"final AlertDialog dialog \\u003d new AlertDialog.Builder(HomeActivity.this).create();\nView inflate \\u003d getLayoutInflater ().inflate(R.layout.prog, null);\ndialog.setView(inflate);\ndialog.setCancelable(false);\ndialog.show();\n\n***********************************\ndialog. hide();\",\"title\":\"Custom Progress Dialog\"},{\"code\":\"Add Source 1\nfinal AlertDialog dialog \\u003d new AlertDialog.Builder(MainActivity.this).create();\n\nView inflate \\u003d getLayoutInflater().inflate(R.layout.cus_dgif,null); \ndialog.setView(inflate);\n\nButton button1 \\u003d (Button)inflate.findViewById(R.id.button1);\n\nButton button2 \\u003d (Button)inflate.findViewById(R.id.button2);\n\nButton button3 \\u003d (Button)inflate.findViewById(R.id.button3);\n\nbutton1.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\ndialog.hide();\n\nAdd Source 2\n}\n});\nbutton2.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\ndialog.hide();\n\nAdd Source 3\n}\n});\nbutton3.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\ndialog.hide();\n\nAdd Source 4\n}\n});\n\ndialog.setCancelable(false);\ndialog.show();\",\"title\":\"Custom Dialog\"},{\"code\":\"_object.setOnTouchListener(new OnTouchListener() {\n\nPointF DownPT \\u003d new PointF();\n\nPointF StartPT \\u003d new PointF();\n\n@Override public boolean onTouch(View v, MotionEvent event) {\n\nint eid \\u003d event.getAction();\n\nswitch (eid) {\n\ncase MotionEvent.ACTION_MOVE:PointF mv \\u003d new PointF(event.getX() - DownPT.x, event.getY() - DownPT.y);\n\n_object.setX((int)(StartPT.x+mv.x));\n\n_object.setY((int)(StartPT.y+mv.y));\n\nStartPT \\u003d new PointF(_object.getX(), _object.getY());\n\nbreak;\n\ncase MotionEvent.ACTION_DOWN : DownPT.x \\u003d event.getX();\n\nDownPT.y \\u003d event.getY();\n\nStartPT \\u003d new PointF(_object.getX(), _object.getY());\n\nbreak;\n\ncase MotionEvent.ACTION_UP : break;\n\ndefault : break;\n\n}\n\nreturn true;\n\n}\n\n});\",\"title\":\"Object Movable Code\"},{\"code\":\"Notification.Builder mBuilder \\u003d new Notification.Builder(MainsetActivity.this);\nmBuilder.setSmallIcon(R.drawable.app_icon);\nmBuilder.setContentTitle(_title);\nmBuilder.setContentText(_content);\nmBuilder.setDefaults(\nNotification.DEFAULT_SOUND\n| Notification.DEFAULT_VIBRATE);\nNotificationManager notificationManager \\u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\nnotificationManager.notify((int)_number, mBuilder.build());\",\"title\":\"Notification of Chat\"},{\"code\":\"webview1.loadUrl(\\\"file:///\\\".concat(_path));\\r\n\nCreate a Variable Name\n(1) path\",\"title\":\"Load a video in webView\"},{\"code\":\"Add Source 1\nfinal\ncom.google.android.material.bottomsheet.BottomSheetDialog bs_base \\u003d new com.google.android.material.bottomsheet.BottomSheetDialog(MainActivity.this);\n\nbs_base.setCancelable(true);\n\nView layBase \\u003d getLayoutInflater().inflate(R.layout.custom, null);\n\nbs_base.setContentView(layBase);\n\nButton button1 \\u003d (Button)layBase.findViewById(R.id.button1);\n\nButton button2 \\u003d (Button)layBase.findViewById(R.id.button2);\n\nButton button3 \\u003d (Button)layBase.findViewById(R.id.button3);\n\nAdd Source 2\nbutton1.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\nbs_base.hide();\n\nAdd Source 3\nbutton2.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\nbs_base.hide();\n\nAdd Source 4\nbutton3.setOnClickListener(new OnClickListener() {\n\npublic void onClick(View view) {\n\nbs_base.hide();\n\nAdd Source 5\n}\n});\nbs_base.show();\n\n*****************\nCreate a Custom Activity\nName \\u003d custom\",\"title\":\"Bottom Sheet Dialog\"},{\"code\":\"int notifyId \\u003d 004; \n \n\n        androidx.core.app.NotificationCompat.BigPictureStyle bpStyle \\u003d new androidx.core.app.NotificationCompat.BigPictureStyle(); \n        bpStyle.bigPicture(BitmapFactory.decodeResource(getResources(), R.drawable.big)).build(); \n \n        Intent rIntent \\u003d getIntent(); \n        PendingIntent pendingIntent \\u003d PendingIntent.getActivity(MainActivity.this, 0, rIntent, 0); \n        androidx.core.app.NotificationCompat.Builder mBuilder \\u003d new androidx.core.app.NotificationCompat.Builder(MainActivity.this) \n                .setSmallIcon(R.drawable.icon) \n                .setContentTitle(\\\"Big Picture Notification\\\") \n                .addAction(android.R.drawable.ic_menu_share, \\\"Share\\\", pendingIntent) \n                .setStyle(bpStyle);\n        mBuilder.setContentIntent(pendingIntent); \n \n        NotificationManager notificationManager \\u003d (NotificationManager) getSystemService(NOTIFICATION_SERVICE); \n\n        if (Build.VERSION.SDK_INT \\u003e\\u003d Build.VERSION_CODES.O) { \n            String channelId2 \\u003d \\\"2\\\"; \n            String channelName2 \\u003d \\\"channel2\\\"; \n \n            NotificationChannel channel \\u003d new NotificationChannel(channelId2, channelName2, NotificationManager.IMPORTANCE_HIGH); \n \n            channel.enableLights(true); \n            channel.setLightColor(Color.RED); \n            channel.setShowBadge(true); \n            channel.enableVibration(true); \n \n            mBuilder.setChannelId(channelId2); \n /*Code by Manish Nirmal */\n            if (notificationManager !\\u003d null) { \n                notificationManager.createNotificationChannel(channel); \n            } \n        } else { \n            mBuilder.setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE); \n        } \n \n        if (notificationManager !\\u003d null) { \n            notificationManager.notify(notifyId, mBuilder.build()); \n        }\n \",\"title\":\"Big picture Notification Code\"},{\"code\":\"int notifyId \\u003d 002; \n \n        Bitmap bigIcon \\u003d BitmapFactory.decodeResource(getResources(), R.drawable.icon); \n \n        androidx.core.app.NotificationCompat.BigTextStyle bigText \\u003d new androidx.core.app.NotificationCompat.BigTextStyle(); \n        bigText.bigText(\\\"Welcome to Android Studio Tutorial, it provides a tutorials related to \\\" + \n                \\\"all Android Programming. It helps enhance your knowledge in Android\\\"); \n        bigText.setSummaryText(\\\"Sketchwate Notification Tutorials\\\"); \n \n        androidx.core.app.NotificationCompat.Builder mBuilder \\u003d new androidx.core.app.NotificationCompat.Builder(MainActivity.this) \n                .setSmallIcon(R.drawable.icon) \n                .setContentTitle(\\\"Big Text Notification\\\") \n                .setLargeIcon(bigIcon) \n                .setStyle(bigText); \n \n        Intent intent \\u003d getIntent(); \n        PendingIntent pendingIntent \\u003d PendingIntent.getActivity(MainActivity.this, 0, intent, 0); \n        mBuilder.setContentIntent(pendingIntent); \n \n        NotificationManager notificationManager \\u003d (NotificationManager) getSystemService(NOTIFICATION_SERVICE); \n \n        if (Build.VERSION.SDK_INT \\u003e\\u003d Build.VERSION_CODES.O) { \n            String channelId2 \\u003d \\\"2\\\"; \n            String channelName2 \\u003d \\\"channel2\\\"; \n \n            NotificationChannel channel \\u003d new NotificationChannel(channelId2, channelName2, NotificationManager.IMPORTANCE_HIGH); \n \n            channel.enableLights(true); \n            channel.setLightColor(Color.RED); \n            channel.setShowBadge(true); \n            channel.enableVibration(true); \n \n            mBuilder.setChannelId(channelId2); \n \n            if (notificationManager !\\u003d null) { \n                notificationManager.createNotificationChannel(channel); \n            } \n        } else { \n            mBuilder.setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE); \n        } \nif (notificationManager !\\u003d null) { \n            notificationManager.notify(notifyId, mBuilder.build()); \n        }\",\"title\":\"Big Text notification\"},{\"code\":\"int notifyId \\u003d 003;\nandroidx.core.app.NotificationCompat.Builder mBuilder \\u003d new androidx.core.app.NotificationCompat.Builder(MainActivity.this) \n.setSmallIcon(R.drawable.icon) \n.setContentTitle(\\\"Title\\\") \n.setContentText(\\\"Message Received\\\")\n.setOngoing(false)\n.setAutoCancel(false);\n\nandroidx.core.app.NotificationCompat.InboxStyle inboxStyle \\u003d new androidx.core.app.NotificationCompat.InboxStyle();\ninboxStyle.setBigContentTitle(\\\"Message Expanded\\\");\ninboxStyle.addLine(\\\"Message 1\\\");\ninboxStyle.addLine(\\\"Message 2\\\");\ninboxStyle.addLine(\\\"Message 3\\\");\ninboxStyle.addLine(\\\"Message 4\\\");\ninboxStyle.addLine(\\\"By Deve Saleman\\\"); \n\nmBuilder.setStyle(inboxStyle); \nIntent intent \\u003d new Intent(MainActivity.this, MainActivity.class); \nintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \nTaskStackBuilder stackBuilder \\u003d TaskStackBuilder.create(MainActivity.this);\nstackBuilder.addNextIntent(intent);\nandroid.app.PendingIntent pIntent \\u003d android.app.PendingIntent.getActivity(MainActivity.this, 0, intent, 0);\n/*Code by Manish Nirmal */\nmBuilder.setContentIntent(pIntent);\nandroid.app.NotificationManager mNotificationManager \\u003d (android.app.NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); if (Build.VERSION.SDK_INT \\u003e\\u003d Build.VERSION_CODES.O) {\nString channelId2 \\u003d \\\"2\\\"; String channelName2 \\u003d \\\"channel2\\\";\nandroid.app.NotificationChannel channel \\u003d new android.app.NotificationChannel(channelId2, channelName2, NotificationManager.IMPORTANCE_HIGH);\nchannel.enableLights(true);\nchannel.setLightColor(Color.RED); channel.setShowBadge(true);\n/*Code by Manish Nirmal */\nchannel.enableVibration(true); mBuilder.setChannelId(channelId2); if (mNotificationManager !\\u003d null) { mNotificationManager.createNotificationChannel(channel); } } else { mBuilder.setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE); }\nif (mNotificationManager !\\u003d null) { mNotificationManager.notify(notifyId, mBuilder.build()); }\",\"title\":\"Inbox Style Notification\"},{\"code\":\"Upload \\u0026 Download Progress\n\n\n\t\t\t\t\n\t\t\t\tfinal int PROGRESS_MAX \\u003d 100;\n\t\t\t\t\n\t\t\t\tfinal Context context \\u003d getApplicationContext();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfinal NotificationManager notificationManager \\u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\t\t\n\t\t\t\tIntent intent \\u003d new Intent(AllchatActivity.this, AllchatActivity.class); \n\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\tPendingIntent pendingIntent \\u003d PendingIntent.getActivity(AllchatActivity.this, 0, intent, 0); \n\t\t\t\tandroidx.core.app.NotificationCompat.Builder builder; \n\t\t\t\t\n\t\t\t\t final  int Saleman \\u003d 1;\n\t\t\t\t    String channelId \\u003d \\\"channel-01\\\";\n\t\t\t\t    String channelName \\u003d \\\"Permissions and Libraries\\\";\n\t\t\t\t    int importance \\u003d NotificationManager.IMPORTANCE_LOW;\n\t\t\t\t\n\t\t\t\t    if (android.os.Build.VERSION.SDK_INT \\u003e\\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t       final NotificationChannel mChannel \\u003d new NotificationChannel(\n\t\t\t\t\t                channelId, channelName, importance);\n\t\t\t\t\t        notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t    }\n\nString value \\u003d String.valueOf((long)\n(_progressValue)).concat(\\\"%\\\");\n\t\t\t\t final androidx.core.app.NotificationCompat.Builder mBuilder \\u003d new androidx.core.app.NotificationCompat.Builder(context, channelId)\n\t\t\t\t            .setSmallIcon(R.drawable.icon)\n\t\t\t\t            .setContentTitle(\\\"Uploading Files ....\\\")\n\t\t\t\t            .setContentText(value)\n\t\t\t\t            .setAutoCancel(false)\n\t\t\t\t            .setOngoing(true)\n\t\t\t\t            .setContentIntent(pendingIntent)\n\t\t\t\t.setProgress(PROGRESS_MAX, 0, false);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t    TaskStackBuilder stackBuilder \\u003d TaskStackBuilder.create(context);\n\t\t\t\t    stackBuilder.addNextIntent(intent);\n\t\t\t\t    PendingIntent resultPendingIntent \\u003d stackBuilder.getPendingIntent(\n\t\t\t\t            0,\n\t\t\t\t            PendingIntent.FLAG_UPDATE_CURRENT\n );\n\t\t\t\t    mBuilder.setContentIntent(resultPendingIntent);\n\t\t\t\t\n\t\t\t\t    \nint progress \\u003d (int)(_progressValue);\nmBuilder.setProgress(PROGRESS_MAX, progress, false);\nnotificationManager.notify(Saleman, mBuilder.build());\n\n\nUpload \\u0026 Download Success\n\nfinal int PROGRESS_MAX \\u003d 100;\n\t\t\t\t\n\t\t\t\tfinal Context context \\u003d getApplicationContext();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfinal NotificationManager notificationManager \\u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\t\t\n\t\t\t\tIntent intent \\u003d new Intent(AllchatActivity.this, AllchatActivity.class); \n\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\tPendingIntent pendingIntent \\u003d PendingIntent.getActivity(AllchatActivity.this, 0, intent, 0); \n\t\t\t\tandroidx.core.app.NotificationCompat.Builder builder; \n\t\t\t\t\n\t\t\t\t final  int Saleman \\u003d 1;\n\t\t\t\t    String channelId \\u003d \\\"channel-01\\\";\n\t\t\t\t    String channelName \\u003d \\\"Permissions and Libraries\\\";\n\t\t\t\t    int importance \\u003d NotificationManager.IMPORTANCE_LOW;\n\t\t\t\t\n\t\t\t\t    if (android.os.Build.VERSION.SDK_INT \\u003e\\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t       final NotificationChannel mChannel \\u003d new NotificationChannel(\n\t\t\t\t\t                channelId, channelName, importance);\n\t\t\t\t\t        notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t    }\n\nString value \\u003d \\\"Uploaded\\\";\n\t\t\t\t final androidx.core.app.NotificationCompat.Builder mBuilder \\u003d new androidx.core.app.NotificationCompat.Builder(context, channelId)\n\t\t\t\t    .setSmallIcon(R.drawable.icon)\n\t\t\t\t            .setContentTitle(\\\"Uploading Files ....\\\")\n\t\t\t\t            .setContentText(value)\n\t\t\t\t            .setAutoCancel(false)\n\t\t\t\t            .setOngoing(true)\n\t\t\t\t            .setContentIntent(pendingIntent)\n\t\t\t\t.setProgress(PROGRESS_MAX, 0, false);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t    TaskStackBuilder stackBuilder \\u003d TaskStackBuilder.create(context);\n\t\t\t\t    stackBuilder.addNextIntent(intent);\n\t\t\t\t    PendingIntent resultPendingIntent \\u003d stackBuilder.getPendingIntent(\n\t\t\t\t            0,\n\t\t\t\t            PendingIntent.FLAG_UPDATE_CURRENT\n );\n\t\t\t\t    mBuilder.setContentIntent(resultPendingIntent);\n\t\t\t\t\n\t\t\t\t    \nmBuilder.setContentText(\\\"Successfully Uploaded\\\")\n.setContentTitle(\\\"Files\\\")\n\t\t\t\t\t\t .setAutoCancel(true)\n\t\t\t\t\t\t            .setOngoing(false)\n\t\t\t\t\t\t.setProgress(0,0,false);\n\t\t\t\t\t\tnotificationManager.notify(Saleman, mBuilder.build());\",\"title\":\"Download \\u0026 Upload Notification\"},{\"code\":\"Intent Install \\u003d new Intent();\n Install.setData(Uri.parse(\\\"file://\\\" + _path));\n\nstartActivity(Install);\",\"title\":\"Install App\"},{\"code\":\"_toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n\n@Override\n\npublic void onClick(View _v) {\n\n_drawer.openDrawer(Gravity.RIGHT);\n\n}\n\n});\n\nLinearLayout _nav_view \\u003d (LinearLayout) findViewById(R.id._nav_view);\n\nandroidx.drawerlayout.widget.DrawerLayout\n\n.LayoutParams lp \\u003d new androidx.drawerlayout.widget.DrawerLayout\n\n.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);\n\nlp.gravity\\u003dGravity.RIGHT;\n\n_nav_view.setLayoutParams(lp);\",\"title\":\"Drawer Right Show\"},{\"code\":\"_fab.getContentBackground().setColorFilter(Color.TRANSPARENT, PorterDuff.Mode.SRC_IN); _fab.setCompatElevation(0);\",\"title\":\"Fab Transparent Code\"},{\"code\":\"android.hardware.camera2.CameraManager cameraManager \\u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \\u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, true); } catch (android.hardware.camera2.CameraAccessException e) { }\",\"title\":\"Flashlight On\"},{\"code\":\"android.hardware.camera2.CameraManager cameraManager \\u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \\u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, false); } catch (android.hardware.camera2.CameraAccessException e) { }\",\"title\":\"Flashlight Off\"},{\"code\":\"final ObjectAnimator animator \\u003d ObjectAnimator.ofInt(_fab, \\\"backgroundTint\\\", Color.rgb(0, 121, 107), Color.rgb(226, 143, 34));\nanimator.setDuration(2000L);\nanimator.setEvaluator(new ArgbEvaluator());\nanimator.setInterpolator(new DecelerateInterpolator(2));\nanimator.addUpdateListener(new ObjectAnimator.AnimatorUpdateListener() {\n    @Override\n    public void onAnimationUpdate(ValueAnimator animation) {\n        int animatedValue \\u003d (int) animation.getAnimatedValue();\n        _fab.setBackgroundTintList(android.content.res.ColorStateList.valueOf(animatedValue));\n    }\n});\nanimator.start();\",\"title\":\"Fab Click Color\"},{\"code\":\"Add Source 1\nbutton1.setOnLongClickListener(new View.OnLongClickListener() {@Override public boolean onLongClick(View v){\n\nAdd Source 2\n return false;}});\",\"title\":\"Long Click button\"},{\"code\":\"Textview BackgroundColor Is Red\n\ntextview1.setBackgroundColor(Color.parseColor(\\\"#ff0000\\\"));\n\n/*OR*/\n\nlinear1 BackgroundColor Is Blue\n\nlinear1.setBackgroundColor(Color.parseColor(\\\"#0000ff\\\"));\",\"title\":\"Text \\u0026 linear Background Color\"},{\"code\":\"{\n\\\"rules\\\":{\n\\\".read\\\":\\\"true\\\",\n\\\".write\\\":\\\"auth.uid \\u003d\\u003d \\u0027Your Uid\\u0027 \\\"\n    }\n}\n\",\"title\":\"Firebase Database secure code 2\"},{\"code\":\"color1 \\u003d 0xffffffff;\n\nanim \\u003d ObjectAnimator.ofInt(linear1, \\\"backgroundColor\\\", color1);\n\nanim.setEvaluator(new ArgbEvaluator());\n\nanim.setDuration(1000);\n\nnew Thread() {\n\npublic void run() {\n\nwhile(true) {\n\ntry {\n\nThread.sleep(1000);\n\n} catch (InterruptedException e) {\n\ne.printStackTrace();\n\n}\n\nrunOnUiThread(new Runnable() {\n\npublic void run() {\n\nred2 \\u003d (int)(java.lang.Math.random() * 128 + 127);\n\ngreen2 \\u003d (int)(java.lang.Math.random() * 128 + 127);\n\nblue2 \\u003d (int)(java.lang.Math.random() * 128 + 127);\n\ncolor2 \\u003d 0xff \\u003c\\u003c 24 | (red2 \\u003c\\u003c 16) | (green2 \\u003c\\u003c 8) | blue2;\n\nanim.setIntValues(color1, color2);\n\nanim.start();\n\ncolor1 \\u003d color2;\n\n}\n\n});\n\n}\n\n}\n\n}.start();\n\n}\n\npublic int color1, color2, red1, red2, blue1, blue2, green1, green2;\n\nObjectAnimator anim;\n\n{\",\"title\":\"Background Color Animation\"},{\"code\":\"fab visible\n\ntextview1.setVisibility(View.VISIBLE);\n\nfab gone\n\ntextview1.setVisibility(View.GONE);\",\"title\":\"Fab Visibility\"},{\"code\":\"Intent takeVideoIntent \\u003d new Intent(MediaStore.ACTION_VIDEO_CAPTURE); if (takeVideoIntent.resolveActivity(getPackageManager()) !\\u003d null) { startActivityForResult(takeVideoIntent, REQ_CD_CAM); }\n\nCreate a Components\n(1) camera\",\"title\":\"Take video Codes\"},{\"code\":\"android.content.pm.PackageInfo pckgInfo \\u003d getPackageManager().getPackageArchiveInfo(info, android.content.pm.PackageManager.GET_ACTIVITIES);\npckgInfo.applicationInfo.sourceDir \\u003d pckgInfo.applicationInfo.publicSourceDir \\u003d info;\nimageview1.setImageDrawable(getPackageManager().getApplicationIcon(pckgInfo.applicationInfo));\n\nCreate a Variable String\n(1) info\",\"title\":\"Get App icon\"},{\"code\":\"final java.io.File file1 \\u003d new java.io.File(info);\ntry{\nlong length \\u003d file1.length();\nlength \\u003d length/1024/1024%1024;\ntextview2.setText(\\\"File size : \\\" + length +\\\" MB\\\");\n}catch(Exception e){\nshowMessage(\\\"File not found : \\\" + e.getMessage() + e);\n}\n\nCreate a Variable String\n(1) info\",\"title\":\"Get file Size\"},{\"code\":\"adview1.loadAd(new AdRequest.Builder().build());\",\"title\":\"Banner ad show\"},{\"code\":\"_drawer_adview1.loadAd(new AdRequest.Builder().build());\",\"title\":\"Drawer Banner ad show\"},{\"code\":\"ads.loadAd(new AdRequest.Builder().build());\n\n*******************************\nonButton\",\"title\":\"Full screen ad on Button\"},{\"code\":\"1. onCreate activity\n\ncom.google.android.gms.ads.MobileAds.initialize(this, \\\"ca-app-pub-7345065139786216/3678234791\\\");\n// Define mRewardedVideoAd\nmRewardedVideoAd \\u003d com.google.android.gms.ads.MobileAds.getRewardedVideoAdInstance(this);\n// Set RewardedVideoAdListener for mRewardedVideoAd\nmRewardedVideoAd.setRewardedVideoAdListener(new com.google.android.gms.ads.reward.RewardedVideoAdListener(){\n@Override\npublic void onRewarded(com.google.android.gms.ads.reward.RewardItem reward) {\nToast.makeText(MainActivity.this, \\\"onRewarded! currency: \\\" + reward.getType() + \\\" amount: \\\" + reward.getAmount(), Toast.LENGTH_SHORT).show();\n// Put code for Rewarding the user here\n}\n@Override\npublic void onRewardedVideoAdLeftApplication() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoAdLeftApplication\\\", Toast.LENGTH_SHORT).show();\n}\n@Override\npublic void onRewardedVideoAdClosed() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoAdClosed\\\", Toast.LENGTH_SHORT).show();\n// Reload new Ad when Ad is closed\nloadRewardedVideoAd();\n}\n@Override\npublic void onRewardedVideoAdFailedToLoad(int errorCode) {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoAdFailedToLoad\\\", Toast.LENGTH_SHORT).show();\n}\n@Override\npublic void onRewardedVideoAdLoaded() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoAdLoaded\\\", Toast.LENGTH_SHORT).show();\n}\n@Override\npublic void onRewardedVideoAdOpened() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoAdOpened\\\", Toast.LENGTH_SHORT).show();\n}\n@Override\npublic void onRewardedVideoStarted() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoStarted\\\", Toast.LENGTH_SHORT).show();\n}\n@Override\npublic void onRewardedVideoCompleted() {\nToast.makeText(MainActivity.this, \\\"onRewardedVideoCompleted\\\", Toast.LENGTH_SHORT).show();\n}\n});\n// Load the Rewarded Video Ad\nloadRewardedVideoAd();\n\n\n2. onResume Activity\n\nmRewardedVideoAd.resume(this);\n\n3. onPause  Activity\n\nmRewardedVideoAd.pause(this);\n\n4. onDestroy Activity\n\nmRewardedVideoAd.destroy(this);\n\n5. Create More block\n --\\u003e  extra\n\n\n}\ncom.google.android.gms.ads.reward.RewardedVideoAd mRewardedVideoAd;\nprivate void loadRewardedVideoAd() {\nmRewardedVideoAd.loadAd(\\\"ca-app-pub-7345065139786216/4608173082\\\", new AdRequest.Builder().build());\n\n\n6. on Button load video ADs\n\nif (mRewardedVideoAd.isLoaded()) {\nmRewardedVideoAd.show();\n} else {\nToast.makeText(MainActivity.this, \\\"Ad not loaded yet\\\", Toast.LENGTH_SHORT).show();\n}\",\"title\":\"Video ad Codes\"},{\"code\":\"GridView gridView \\u003d new GridView(this);\ngridView.setLayoutParams(new GridView.LayoutParams(GridLayout.LayoutParams.MATCH_PARENT, GridLayout.LayoutParams.WRAP_CONTENT));\n\n///gridView.setBackgroundColor(Color.WHITE);\n\ngridView.setNumColumns(4);\ngridView.setColumnWidth(GridView.AUTO_FIT);\n\ngridView.setVerticalSpacing(10);\n\ngridView.setHorizontalSpacing(10);\ngridView.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\n\ngridView.setAdapter(new Listview1Adapter(_ListMap));\n\n((BaseAdapter)gridView.getAdapter()).notifyDataSetChanged();\n\ngrid_layout.addView(gridView);\n\n***********************************\nCreate List Map\n(1) map\",\"title\":\"Listview gridview\"},{\"code\":\"Add Source 1\n\nbap \\u003d new com.google.android.material.bottomappbar.BottomAppBar(this);\n\n\nbap.getContext().setTheme(R.style.AppTheme_AppBarOverlay | R.style.AppTheme_PopupOverlay);\n\n\nbap.setBackgroundTint(getColorStateList(R.color.colorPrimary));\n\n\nbap.setFabAlignmentMode(com.google.android.material.bottomappbar.BottomAppBar.FAB_ALIGNMENT_MODE_END);\n\n\nbap.setElevation(30);\n\n\nandroidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams lp \\u003d new androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams(androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams.FILL_PARENT, 80);\n\n\nlp.gravity \\u003d Gravity.BOTTOM;\n\n\nbap.setLayoutParams(lp);\n\n\nbap.setId(View.generateViewId());\n\n\n((ViewGroup)_fab.getParent()).addView(bap);\n\n\n((androidx.coordinatorlayout.widget.CoordinatorLayout.LayoutParams)_fab.getLayoutParams()).setAnchorId(bap.getId());\n\n\nbap.setFabCradleMargin(5);\n\n\nAdd Source 2\n\n}\n\n\nprivate com.google.android.material.bottomappbar.BottomAppBar bap;\n\n\nprivate void doNothing() {\n\",\"title\":\"App Bottom Bar Code\"},{\"code\":\"MediaMetadataRetriever retriever \\u003d new MediaMetadataRetriever(); retriever.setDataSource(getApplicationContext(), Uri.fromFile(file1)); String time \\u003d retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION); long timeInMillisec \\u003d Long.parseLong(time ); retriever.release(); textview3.setText(String.valueOf(timeInMillisec/60000) + \\\" min\\\" + \\\", \\\" + String.valueOf((timeInMillisec/1000)%60) + \\\" s\\\");\n\nCreate a Variable String\n(1) file\",\"title\":\"Get video time\"},{\"code\":\"TranslationY\n_view.setTranslationY((float)_num);\n\nTranslationX\n_view.setTranslationX((float)_num);\n\nTranslationZ\n_view.setTranslationZ((float)_num);\n\nCreate MoreBlock Translation\nView\n(1) view\",\"title\":\"Translation Codes\"},{\"code\":\"getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_drawer_icon);\n// set drawable icon\ngetSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\nSet icon name\n(1) ic_drawer_icon\",\"title\":\"Drawer icon Code\"},{\"code\":\"ProgressBar msg \\u003d new ProgressBar(MainActivity.this);  linear1.addView(msg);\",\"title\":\"Create Progress bar\"},{\"code\":\"ScaleAnimation scaleAnimation \\u003d new ScaleAnimation(1f,4f,1f,4f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f); \nscaleAnimation.setInterpolator(new LinearInterpolator()); \nscaleAnimation.setDuration((int)_num); \n_txt.startAnimation(scaleAnimation);\n\n     *******************************\nCreate a More block\n(1) Textview_animation\n\n Textview ,txt  number, num\",\"title\":\"Textview Zoom Animation\"},{\"code\":\"boolean isAppInstalled \\u003d appInstalledOrNot(q); // androidbulb\n\nif(isAppInstalled) {\nshowMessage(\\\"App installed\\\");\n} else {showMessage(\\\"App not installed\\\");}}\n\nprivate boolean appInstalledOrNot(String uri) { android.content.pm.PackageManager pm \\u003d getPackageManager(); try { pm.getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES); return true; } catch (android.content.pm.PackageManager.NameNotFoundException e) { } return false;\",\"title\":\"Check App installed\"},{\"code\":\"Uri packageURI \\u003d Uri.parse(\\\"package:\\\".concat(\\\"com.package.name\\\")); Intent uninstallIntent \\u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);\",\"title\":\"Uninstall App\"},{\"code\":\"getWindow().getAttributes().screenBrightness \\u003d(float)_progressValue/100 ; getWindow().setAttributes(getWindow().getAttributes());\n\n\nOnProgress Bar\",\"title\":\"Brightness Code\"},{\"code\":\"Calendar c \\u003d Calendar.getInstance();\nint timeOfDay \\u003d c.get(Calendar.HOUR_OF_DAY);\n\nif(timeOfDay \\u003e\\u003d 0 \\u0026\\u0026 timeOfDay \\u003c 12){\n    textview1.setText(\\\"Good Morning\\\");\n}else if(timeOfDay \\u003e\\u003d 12 \\u0026\\u0026 timeOfDay \\u003c 16){\n    textview1.setText(\\\"Good Afternoon\\\");\n}else if(timeOfDay \\u003e\\u003d 16 \\u0026\\u0026 timeOfDay \\u003c 21){\n    textview1.setText(\\\"Good Evening\\\");\n}else if(timeOfDay \\u003e\\u003d 21 \\u0026\\u0026 timeOfDay \\u003c 24){\n    textview1.setText( \\\"Good Night\\\");\n}\",\"title\":\"Wishes Code\"},{\"code\":\"Code 1\nSeekBar OnStart Tracking Touch:\n\naudioManager \\u003d (AudioManager) getSystemService(Context.AUDIO_SERVICE); seekbar1.setMax(audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));\n\n}\n\nAudioManager audioManager;\n\nprivate void nothing() {\n\nCode 2\nOnSeekBar Changed :\n\ntextview1.setText(\\\"Music Volume : \\\" + _progressValue);\n\naudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, _progressValue, 0);\n\n\",\"title\":\"Volume Code\"},{\"code\":\"Intent intent \\u003d new Intent();\n     intent.setAction(Intent.ACTION_VIEW);\n     intent.setData(Uri.parse(\\\"https://www.developerrajendra.blogspot.com\\\"));\n     startActivity(intent);\",\"title\":\"Open Link button\"},{\"code\":\"android.graphics.drawable.GradientDrawable style \\u003d new android.graphics.drawable.GradientDrawable();\nstyle.setCornerRadius((float)20);\nstyle.setColor(new android.content.res.ColorStateList(new int[][] {{ -android.R.attr.state_pressed} , {android.R.attr.state_pressed}}, new int [] {Color.parseColor(\\\"#FF0000\\\"), Color.parseColor(\\\"#000000\\\")}));\nstyle.setStroke((int)5, new android.content.res.ColorStateList(new int [][] {{ -android.R.attr.state_pressed}, {android.R.attr.state_pressed}}, new int [] {Color.parseColor(\\\"#0000FF\\\"), Color.parseColor(\\\"#00FF00\\\")}));\nbutton1.setBackground(style);\",\"title\":\"Button Style Code\"},{\"code\":\"textview1.setText(\\\"Total List Items :\\\"+listview1.getAdapter().getCount());\",\"title\":\"Count Total list items\"},{\"code\":\"android.net.ConnectivityManager connMgr \\u003d (android.net.ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\nandroid.net.NetworkInfo networkInfo \\u003d connMgr.getActiveNetworkInfo();\nif (networkInfo !\\u003d null \\u0026\\u0026 networkInfo.isConnected()) {\n\n\nfinal String urlDownload \\u003d _url;\n\nDownloadManager.Request request \\u003d new DownloadManager.Request(Uri.parse(urlDownload));\n\nfinal String fileName \\u003d URLUtil.guessFileName(urlDownload, null, null);\n\nrequest.setDescription(\\\"URL - \\\" + urlDownload);\n\nrequest.setTitle(fileName);\n\nrequest.allowScanningByMediaScanner();\n\nrequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n\nrequest.setDestinationInExternalPublicDir(_path, fileName);\n\nfinal DownloadManager manager \\u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\n\nfinal long downloadId \\u003d manager.enqueue(request);\n\nfinal ProgressDialog prog \\u003d new ProgressDialog(this);\nprog.setMax(100);\nprog.setIndeterminate(true);\nprog.setCancelable(false);\nprog.setCanceledOnTouchOutside(false);\nprog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\nprog.setTitle(\\\"Downloading...\\\");\n\nnew Thread(new Runnable() {\n@Override\npublic void run() {\n\nboolean downloading \\u003d true;\n\nwhile (downloading) {\n\nDownloadManager.Query q \\u003d new DownloadManager.Query();\n\nq.setFilterById(downloadId);\n\nandroid.database.Cursor cursor \\u003d manager.query(q);\n\ncursor.moveToFirst();\n\nint bytes_downloaded \\u003d cursor.getInt(cursor .getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));\n\nint bytes_total \\u003d cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES));\n\nif (cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS)) \\u003d\\u003d DownloadManager.STATUS_SUCCESSFUL) {\n\ndownloading \\u003d false;\n\n}\n\nfinal int dl_progress \\u003d (int) ((bytes_downloaded * 100l) / bytes_total);\n\nrunOnUiThread(new Runnable() {\n@Override\npublic void run() {\n\nprog.setTitle(\\\"Downloading...\\\");\nprog.setMessage(\\\"Downloading the \\\" + fileName + \\\".\\\n\\\nProgress - \\\" + dl_progress + \\\"%\\\");\nprog.show();\nshowMessage(\\\"Downloaded\\\");\nif (dl_progress \\u003d\\u003d 100) {\nprog.dismiss();\n}\n\n} });\n} } }).start();\n\n\n} else {\nshowMessage(\\\"No Internet Connection.\\\");\n}\n\nCreate a More block\n(1) url\n(2) path\",\"title\":\"Webview Download Code\"},{\"code\":\"dialog \\u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_DARK);\",\"title\":\"Dark dialog\"},{\"code\":\"// No Security\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\".read\\\": true,\n\n    \\\".write\\\": true\n\n  }\n\n}\n\n\n// Full security\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\".read\\\": false,\n\n    \\\".write\\\": false\n\n  }\n\n}\n\n\n// Only authenticated users can access/write data\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\".read\\\": \\\"auth !\\u003d null\\\",\n\n    \\\".write\\\": \\\"auth !\\u003d null\\\"\n\n  }\n\n}\n\n\n// Checks auth uid equals database node uid\n\n// In other words, the User can only access their own data\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".read\\\": \\\"$uid \\u003d\\u003d\\u003d auth.uid\\\",\n\n         \\\".write\\\": \\\"$uid \\u003d\\u003d\\u003d auth.uid\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Validates user is moderator from different database location\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".write\\\": \\\"root.child(\\u0027users\\u0027).child(\\u0027moderator\\u0027).val() \\u003d\\u003d\\u003d true\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Validates string datatype and length range\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".validate\\\": \\\"newData.isString() \n\n\\u0026\\u0026 newData.val().length \\u003e 0\n\n\\u0026\\u0026 newData.val().length \\u003c\\u003d 140\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Checks presense of child attributes\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".validate\\\": \\\"newData.hasChildren([\\u0027username\\u0027, \\u0027timestamp\\u0027])\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Validates timestamp is not a future value\n\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\"timestamp\\\": { \n\n           \\\".validate\\\": \\\"newData.val() \\u003c\\u003d now\\\" \n\n         }\n\n       }\n\n     }\n\n   }\n\n}\n\n\n\n// Prevents Delete or Update\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".write\\\": \\\"!data.exists()\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Prevents only Delete\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".write\\\": \\\"newData.exists()\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Prevents only Update\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".write\\\": \\\"!data.exists() || !newData.exists()\\\"\n\n       }\n\n     }\n\n   }\n\n}\n\n\n// Prevents Create and Delete\n\n{\n\n  \\\"rules\\\": {\n\n    \\\"posts\\\": {\n\n       \\\"$uid\\\": {\n\n         \\\".write\\\": \\\"data.exists() \\u0026\\u0026 newData.exists()\\\"\n\n       }\n\n     }\n\n   }\n\n}\",\"title\":\"Firebase Different Rules\"},{\"code\":\"getSupportActionBar().setTitle(null);\n\ngetSupportActionBar().setDisplayShowTitleEnabled(false);\n\ngetSupportActionBar().setDisplayHomeAsUpEnabled(false);\n\n_toolbar.setContentInsetStartWithNavigation(0);\n\n_toolbar.setContentInsetsAbsolute(0, 0);\n\n\n\nlinear1.removeView(imageview1);\n_toolbar.addView(imageview1);\",\"title\":\"Toolbar Show imageview\"},{\"code\":\"IntentFilter ifilter \\u003d new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\n\nIntent batteryStatus \\u003d registerReceiver(null, ifilter);\n\nint temp \\u003d batteryStatus.getIntExtra(BatteryManager.EXTRA_TEMPERATURE,0);\n\nfloat tempTwo \\u003d ((float) temp) / 10;\n\ntextview1.setText(tempTwo + \\\" °C\\\");\",\"title\":\"Battery Temperature Code\"},{\"code\":\"BatteryManager bm \\u003d (BatteryManager)getSystemService(BATTERY_SERVICE);\nint batLevel \\u003d bm.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);\ntextview1.setText(Integer.toString(batLevel));\",\"title\":\"Battery Present level\"},{\"code\":\"final String secondaryColor \\u003d \\\"#678cb1\\\";\nfinal String primaryColor \\u003d \\\"#86b55a\\\";\nfinal String numbersColor \\u003d \\\"#f6c921\\\";\nfinal String quotesColor \\u003d \\\"#ff1744\\\";\nfinal String commentsColor \\u003d \\\"#9e9e9e\\\";\nfinal String charColor \\u003d \\\"#ff5722\\\";\nfinal TextView regex1 \\u003d new TextView(this);\nfinal TextView regex2 \\u003d new TextView(this);\nfinal TextView regex3 \\u003d new TextView(this);\nfinal TextView regex4 \\u003d new TextView(this);\nfinal TextView regex5 \\u003d new TextView(this);\nfinal TextView regex6 \\u003d new TextView(this);\nfinal TextView regex7 \\u003d new TextView(this);\nfinal TextView regex8 \\u003d new TextView(this);\nfinal TextView regex9 \\u003d new TextView(this);\nfinal TextView regex10 \\u003d new TextView(this);\nfinal TextView regex11 \\u003d new TextView(this);\n\nregex1.setText(\\\"\\\\\\\\b(out|print|println|valueOf|toString|concat|equals|for|while|switch|getText\\\");\n\nregex2.setText(\\\"|println|printf|print|out|parseInt|round|sqrt|charAt|compareTo|compareToIgnoreCase|concat|contains|contentEquals|equals|length|toLowerCase|trim|toUpperCase|toString|valueOf|substring|startsWith|split|replace|replaceAll|lastIndexOf|size)\\\\\\\\b\\\");\n\nregex3.setText(\\\"\\\\\\\\b(public|private|protected|void|switch|case|class|import|package|extends|Activity|TextView|EditText|LinearLayout|CharSequence|String|int|onCreate|ArrayList|float|if|else|static|Intent|Button|SharedPreferences\\\");\n\nregex4.setText(\\\"|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|interface|long|native|new|package|private|protected|\\\");\n\nregex5.setText(\\\"public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while|true|false|null)\\\\\\\\b\\\");\n\nregex6.setText(\\\"\\\\\\\\b([0-9]+)\\\\\\\\b\\\");\n\nregex7.setText(\\\"(\\\\\\\\w+)(\\\\\\\\()+\\\");\n\nregex8.setText(\\\"\\\\\\\\@\\\\\\\\s*(\\\\\\\\w+)\\\");\n\nregex9.setText(\\\"\\\\\\\"(.*?)\\\\\\\"|\\u0027(.*?)\\u0027\\\");\n\nregex10.setText(\\\"/\\\\\\\\*(?:.|[\\\\\\\n\\\\\\\\r])*?\\\\\\\\*/|//.*\\\");\n\nregex11.setText(\\\"\\\\\\\\b(Uzuakoli|Amoji|Bright|Ndudirim|Ezinwanne|Lightworker|Isuochi|Abia|Ngodo)\\\\\\\\b\\\");\n_view.addTextChangedListener(new TextWatcher() { ColorScheme keywords1 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex1.getText().toString().concat(regex2.getText().toString())), Color.parseColor(secondaryColor));\n\nColorScheme keywords2 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex3.getText().toString().concat(regex4.getText().toString().concat(regex5.getText().toString()))), Color.parseColor(primaryColor));\n\nColorScheme keywords3 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex6.getText().toString()), Color.parseColor(numbersColor));\n\nColorScheme keywords4 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex7.getText().toString()), Color.parseColor(secondaryColor));\n\nColorScheme keywords5 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex9.getText().toString()), Color.parseColor(quotesColor));\n\nColorScheme keywords6 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex10.getText().toString()), Color.parseColor(commentsColor));\n\nColorScheme keywords7 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex8.getText().toString()), Color.parseColor(numbersColor));\n\n\nColorScheme keywords8 \\u003d new ColorScheme(java.util.regex.Pattern.compile(regex11.getText().toString()), Color.parseColor(charColor));\n\nfinal ColorScheme[] schemes \\u003d {keywords1, keywords2, keywords3, keywords4, keywords5, keywords6, keywords7, keywords8}; @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { } @Override public void afterTextChanged(Editable s) { removeSpans(s, android.text.style.ForegroundColorSpan.class); for(ColorScheme scheme : schemes) { for(java.util.regex.Matcher m \\u003d scheme.pattern.matcher(s);\n\nm.find();) { if (scheme \\u003d\\u003d keywords4) { s.setSpan(new android.text.style.ForegroundColorSpan(scheme.color), m.start(), m.end()-1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n} \nelse { s.setSpan(new android.text.style.ForegroundColorSpan(scheme.color), m.start(), m.end(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); } } } } void removeSpans(Editable e, Class type) { android.text.style.CharacterStyle[] spans \\u003d e.getSpans(0, e.length(), type); for (android.text.style.CharacterStyle span : spans) { e.removeSpan(span); } } class ColorScheme { final java.util.regex.Pattern pattern; final int color; ColorScheme(java.util.regex.Pattern pattern, int color) { this.pattern \\u003d pattern; this.color \\u003d color; } } });\n\n*******************************\nCreate a More block Add Text name\n(1) view\",\"title\":\"Text Syntax Highlighter\"},{\"code\":\"Add Source 1\n\nfinal DilatingDotsProgressBar bar \\u003d new DilatingDotsProgressBar(this); \nbar.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT)); \nbar.setDotRadius(8); \nbar.setDotColors(Color.WHITE, Color.parseColor(\\\"#FF0000\\\")); \nbar.setNumberOfDots(3); \nbar.setDotScaleMultiplier(10); \nbar.setGrowthSpeed(500); \nbar.setDotSpacing(5); \n((LinearLayout)_v).addView(bar);\n\nAdd Source 2\n}public static class DilatingDotDrawable extends android.graphics.drawable.Drawable {\n    private static final String TAG \\u003d DilatingDotDrawable.class.getSimpleName();\n    private Paint mPaint \\u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n    private float radius;\n    private float maxRadius;\n    final Rect mDirtyBounds \\u003d new Rect(0, 0, 0, 0);\n\n    public DilatingDotDrawable(final int color, final float radius, final float maxRadius) {\n        mPaint.setColor(color);\n        mPaint.setStyle(Paint.Style.FILL);\n        mPaint.setStrokeCap(Paint.Cap.ROUND);\n        mPaint.setStrokeJoin(Paint.Join.ROUND);\n\n        this.radius \\u003d radius;\n        setMaxRadius(maxRadius);\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        final Rect bounds \\u003d getBounds();\n        canvas.drawCircle(bounds.centerX(), bounds.centerY(), radius - 1, mPaint);\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        if (alpha !\\u003d mPaint.getAlpha()) {\n            mPaint.setAlpha(alpha);\n            invalidateSelf();\n        }\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter colorFilter) {\n        mPaint.setColorFilter(colorFilter);\n        invalidateSelf();\n    }\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n    public void setColor(int color) {\n        mPaint.setColor(color);\n        invalidateSelf();\n    }\n\n    public void setRadius(float radius) {\n        this.radius \\u003d radius;\n        invalidateSelf();\n    }\n\n    public float getRadius() {\n        return radius;\n    }\n\n    @Override\n    public int getIntrinsicWidth() {\n        return (int) (maxRadius * 2) + 2;\n    }\n\n    @Override\n    public int getIntrinsicHeight() {\n        return (int) (maxRadius * 2) + 2;\n    }\n\n    public void setMaxRadius(final float maxRadius) {\n        this.maxRadius \\u003d maxRadius;\n        mDirtyBounds.bottom \\u003d (int) (maxRadius * 2) + 2;\n        mDirtyBounds.right \\u003d (int) (maxRadius * 2) + 2;\n    }\n\n    @Override\n    public Rect getDirtyBounds() {\n        return mDirtyBounds;\n    }\n\n    @Override\n    protected void onBoundsChange(final Rect bounds) {\n        super.onBoundsChange(bounds);\n        mDirtyBounds.offsetTo(bounds.left, bounds.top);\n    }\n}\n\n\npublic static class DilatingDotsProgressBar extends View {\n    public static final String TAG \\u003d DilatingDotsProgressBar.class.getSimpleName();\n    public static final double START_DELAY_FACTOR \\u003d 0.35;\n    private static final float DEFAULT_GROWTH_MULTIPLIER \\u003d 1.75f;\n    private static final int MIN_SHOW_TIME \\u003d 500; // ms\n    private static final int MIN_DELAY \\u003d 500; // ms\n    private int mDotColor;\n    private int mDotEndColor;\n    private int mAnimationDuration;\n    private int mWidthBetweenDotCenters;\n    private int mNumberDots;\n    private float mDotRadius;\n    private float mDotScaleMultiplier;\n    private float mDotMaxRadius;\n    private float mHorizontalSpacing;\n    private long mStartTime \\u003d -1;\n    private boolean mShouldAnimate;\n    private boolean mDismissed \\u003d false;\n    private boolean mIsRunning \\u003d false;\n    private boolean mAnimateColors \\u003d false;\n    private ArrayList\\u003cDilatingDotDrawable\\u003e mDrawables \\u003d new ArrayList\\u003c\\u003e();\n    private final List\\u003candroid.animation.Animator\\u003e mAnimations \\u003d new ArrayList\\u003c\\u003e();\n    /** delayed runnable to stop the progress */\n    private final Runnable mDelayedHide \\u003d new Runnable() {\n        @Override\n        public void run() {\n            mStartTime \\u003d -1;\n            mIsRunning \\u003d false;\n            setVisibility(View.GONE);\n            stopAnimations();\n        }\n    };\n\n    /** delayed runnable to start the progress */\n    private final Runnable mDelayedShow \\u003d new Runnable() {\n        @Override\n        public void run() {\n            if (!mDismissed) {\n                mStartTime \\u003d System.currentTimeMillis();\n                setVisibility(View.VISIBLE);\n                startAnimations();\n            }\n        }\n    };\n\n    public DilatingDotsProgressBar(Context context) {\n        this(context, null);\n    }\n\n    public DilatingDotsProgressBar(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n\npublic DilatingDotsProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init(attrs);\n    }\n\n    private void init(AttributeSet attrs) {\n        //TypedArray a \\u003d getContext().obtainStyledAttributes(attrs, R.styleable.DilatingDotsProgressBar);\n        //mNumberDots \\u003d a.getInt(R.styleable.DilatingDotsProgressBar_dd_numDots, 3);\n        //mDotRadius \\u003d a.getDimension(R.styleable.DilatingDotsProgressBar_android_radius, 8);\n        //mDotColor \\u003d a.getColor(R.styleable.DilatingDotsProgressBar_android_color, 0xff9c27b0);\n        //mDotEndColor \\u003d a.getColor(R.styleable.DilatingDotsProgressBar_dd_endColor, mDotColor);\n        //mDotScaleMultiplier \\u003d a.getFloat(R.styleable.DilatingDotsProgressBar_dd_scaleMultiplier, DEFAULT_GROWTH_MULTIPLIER);\n        //mAnimationDuration \\u003d a.getInt(R.styleable.DilatingDotsProgressBar_dd_animationDuration, 300);\n        //mHorizontalSpacing \\u003d a.getDimension(R.styleable.DilatingDotsProgressBar_dd_horizontalSpacing, 12);\n        //a.recycle();\n\n\n        mNumberDots \\u003d 3;\n        mDotRadius \\u003d 8;\n        mDotColor \\u003d Color.RED;\n        mDotEndColor \\u003d mDotColor;\n        mDotScaleMultiplier \\u003d DEFAULT_GROWTH_MULTIPLIER;\n        mAnimationDuration \\u003d 300;\n        mHorizontalSpacing \\u003d 12;\n\n\n\n        mShouldAnimate \\u003d false;\n        mAnimateColors \\u003d mDotColor !\\u003d mDotEndColor;\n        calculateMaxRadius();\n        calculateWidthBetweenDotCenters();\n\n        initDots();\n        updateDots();\n    }\n\n    @Override\n    protected void onSizeChanged(final int w, final int h, final int oldw, final int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (computeMaxHeight() !\\u003d h || w !\\u003d computeMaxWidth()) {\n            updateDots();\n        }\n    }\n\n    @Override\n    public void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        removeCallbacks();\n    }\n\n    private void removeCallbacks() {\n        removeCallbacks(mDelayedHide);\n        removeCallbacks(mDelayedShow);\n    }\n\n    public void reset() {\n        hideNow();\n    }\n\n    /**\n     * Hide the progress view if it is visible. The progress view will not be\n     * hidden until it has been shown for at least a minimum show time. If the\n     * progress view was not yet visible, cancels showing the progress view.\n     */\n    @SuppressWarnings (\\\"unused\\\")\n    public void hide() {\n        hide(MIN_SHOW_TIME);\n    }\n\n    public void hide(int delay) {\n        mDismissed \\u003d true;\n        removeCallbacks(mDelayedShow);\n        long diff \\u003d System.currentTimeMillis() - mStartTime;\n        if ((diff \\u003e\\u003d delay) || (mStartTime \\u003d\\u003d -1)) {\n            mDelayedHide.run();\n        } else {\n            if ((delay - diff) \\u003c\\u003d 0) {\n                mDelayedHide.run();\n            } else {\n                postDelayed(mDelayedHide, delay - diff);\n            }\n        }\n    }\n\n    /**\n     * Show the progress view after waiting for a minimum delay. If\n     * during that time, hide() is called, the view is never made visible.\n     */\n    @SuppressWarnings (\\\"unused\\\")\n    public void show() {\n        show(MIN_DELAY);\n    }\n\n    @SuppressWarnings (\\\"unused\\\")\n    public void showNow() {\n        show(0);\n    }\n\n    @SuppressWarnings (\\\"unused\\\")\n    public void hideNow() {\n        hide(0);\n    }\n\n    public void show(int delay) {\n        if (mIsRunning) {\n            return;\n        }\n\n        mIsRunning \\u003d true;\n\n        mStartTime \\u003d -1;\n        mDismissed \\u003d false;\n        removeCallbacks(mDelayedHide);\n\n        if (delay \\u003d\\u003d 0) {\n            mDelayedShow.run();\n        } else {\n            postDelayed(mDelayedShow, delay);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (shouldAnimate()) {\n            for (DilatingDotDrawable dot : mDrawables) {\n                dot.draw(canvas);\n            }\n        }\n    }\n\n    @Override\n    protected boolean verifyDrawable(final android.graphics.drawable.Drawable who) {\n        if (shouldAnimate()) {\n            return mDrawables.contains(who);\n        }\n        return super.verifyDrawable(who);\n    }\n\n    @Override\n    protected\n\n\n\nvoid onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension((int) computeMaxWidth(), (int) computeMaxHeight());\n    }\n\n    private float computeMaxHeight() {\n        return mDotMaxRadius * 2;\n    }\n\n    private float computeMaxWidth() {\n        return computeWidth() + ((mDotMaxRadius - mDotRadius) * 2);\n    }\n\n    private float computeWidth() {\n        return (((mDotRadius * 2) + mHorizontalSpacing) * mDrawables.size()) - mHorizontalSpacing;\n    }\n\n    private void calculateMaxRadius() {\n        mDotMaxRadius \\u003d mDotRadius * mDotScaleMultiplier;\n    }\n\n    private void calculateWidthBetweenDotCenters() {\n        mWidthBetweenDotCenters \\u003d (int) (mDotRadius * 2) + (int) mHorizontalSpacing;\n    }\n\n    private void initDots() {\n        mDrawables.clear();\n        mAnimations.clear();\n        for (int i \\u003d 1; i \\u003c\\u003d mNumberDots; i++) {\n            final DilatingDotDrawable dot \\u003d new DilatingDotDrawable(mDotColor, mDotRadius, mDotMaxRadius);\n            dot.setCallback(this);\n            mDrawables.add(dot);\n\n            final long startDelay \\u003d (i - 1) * (int) (START_DELAY_FACTOR * mAnimationDuration);\n\n            // Sizing\n            android.animation.ValueAnimator growAnimator \\u003d android.animation.ObjectAnimator.ofFloat(dot, \\\"radius\\\", mDotRadius, mDotMaxRadius, mDotRadius);\n            growAnimator.setDuration(mAnimationDuration);\n            growAnimator.setInterpolator(new android.view.animation.AccelerateDecelerateInterpolator());\n            if (i \\u003d\\u003d mNumberDots) {\n                growAnimator.addListener(new android.animation.AnimatorListenerAdapter() {\n                    @Override\n                    public void onAnimationEnd(android.animation.Animator animation) {\n                        if (shouldAnimate()) {\n                            startAnimations();\n                        }\n                    }\n                });\n            }\n            growAnimator.setStartDelay(startDelay);\n\n            mAnimations.add(growAnimator);\n\n            if (mAnimateColors) {\n                // Gradient\n                android.animation.ValueAnimator colorAnimator \\u003d android.animation.ValueAnimator.ofInt(mDotEndColor, mDotColor);\n                colorAnimator.setDuration(mAnimationDuration);\n                colorAnimator.setEvaluator(new android.animation.ArgbEvaluator());\n                colorAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\n                    @Override\n                    public void onAnimationUpdate(android.animation.ValueAnimator animator) {\n                        dot.setColor((int) animator.getAnimatedValue());\n                    }\n\n                });\n                if (i \\u003d\\u003d mNumberDots) {\n                    colorAnimator.addListener(new android.animation.AnimatorListenerAdapter() {\n                        @Override\n                        public void onAnimationEnd(android.animation.Animator animation) {\n                            if (shouldAnimate()) {\n                                startAnimations();\n                            }\n                        }\n                    });\n                }\n                colorAnimator.setStartDelay(startDelay);\n\n                mAnimations.add(colorAnimator);\n            }\n        }\n    }\n\n    private void updateDots() {\n        if (mDotRadius \\u003c\\u003d 0) {\n            mDotRadius \\u003d getHeight() / 2 / mDotScaleMultiplier;\n        }\n\n        int left \\u003d (int) (mDotMaxRadius - mDotRadius);\n        int right \\u003d (int) (left + mDotRadius * 2) + 2;\n        int top \\u003d 0;\n        int bottom \\u003d (int) (mDotMaxRadius * 2) + 2;\n\n        for (int i \\u003d 0; i \\u003c mDrawables.size(); i++) {\n            final DilatingDotDrawable dot \\u003d mDrawables.get(i);\n            dot.setRadius(mDotRadius);\n            dot.setBounds(left, top, right, bottom);\n            android.animation.ValueAnimator growAnimator \\u003d (android.animation.ValueAnimator) mAnimations.get(i);\n            growAnimator.setFloatValues(mDotRadius, mDotRadius * mDotScaleMultiplier, mDotRadius);\n\n            left +\\u003d mWidthBetweenDotCenters;\n            right +\\u003d\n\nmWidthBetweenDotCenters;\n        }\n    }\n\n    protected void startAnimations() {\n        mShouldAnimate \\u003d true;\n        for (android.animation.Animator anim : mAnimations) {\n            anim.start();\n        }\n    }\n\n    protected void stopAnimations() {\n        mShouldAnimate \\u003d false;\n        removeCallbacks();\n        for (android.animation.Animator anim : mAnimations) {\n            anim.cancel();\n        }\n    }\n\n    protected boolean shouldAnimate() {\n        return mShouldAnimate;\n    }\n\n    // -------------------------------\n    // ------ Getters \\u0026 Setters ------\n    // -------------------------------\n\n    public void setDotRadius(float radius) {\n        reset();\n        mDotRadius \\u003d radius;\n        calculateMaxRadius();\n        calculateWidthBetweenDotCenters();\n        setupDots();\n    }\n\n    public void setDotSpacing(float horizontalSpacing) {\n        reset();\n        mHorizontalSpacing \\u003d horizontalSpacing;\n        calculateWidthBetweenDotCenters();\n        setupDots();\n    }\n\n    public void setGrowthSpeed(int growthSpeed) {\n        reset();\n        mAnimationDuration \\u003d growthSpeed;\n        setupDots();\n    }\n\n    public void setNumberOfDots(int numDots) {\n        reset();\n        mNumberDots \\u003d numDots;\n        setupDots();\n    }\n\n    public void setDotScaleMultiplier(float multiplier) {\n        reset();\n        mDotScaleMultiplier \\u003d multiplier;\n        calculateMaxRadius();\n        setupDots();\n    }\n\n    public void setDotColor(int color) {\n        if (color !\\u003d mDotColor) {\n            if (mAnimateColors) {\n                // Cancel previous animations\n                reset();\n                mDotColor \\u003d color;\n                mDotEndColor \\u003d color;\n                mAnimateColors \\u003d false;\n\n                setupDots();\n\n            } else {\n                mDotColor \\u003d color;\n                for (DilatingDotDrawable dot : mDrawables) {\n                    dot.setColor(mDotColor);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set different start and end colors for dots. This will result in gradient behaviour. In case you want set 1 solid\n     * color - use {@link #setDotColor(int)} instead\n     *\n     * @param startColor starting color of the dot\n     * @param endColor   ending color of the dot\n     */\n    public void setDotColors(int startColor, int endColor) {\n        if (mDotColor !\\u003d startColor || mDotEndColor !\\u003d endColor) {\n            if (mAnimateColors) {\n                reset();\n            }\n            mDotColor \\u003d startColor;\n            mDotEndColor \\u003d endColor;\n\n            mAnimateColors \\u003d mDotColor !\\u003d mDotEndColor;\n\n            setupDots();\n        }\n    }\n\n    private void setupDots() {\n        initDots();\n        updateDots();\n        showNow();\n    }\n\n    public int getDotGrowthSpeed() {\n        return mAnimationDuration;\n    }\n\n    public float getDotRadius() {\n        return mDotRadius;\n    }\n\n    public float getHorizontalSpacing() {\n        return mHorizontalSpacing;\n    }\n\n    public int getNumberOfDots() {\n        return mNumberDots;\n    }\n\n    public float getDotScaleMultiplier() {\n        return mDotScaleMultiplier;\n    }\n}{\n\n   **********************************\nCreate a Moreblock  DotloadingAnimation\n(1) view\",\"title\":\"Dot Loading Animation\"},{\"code\":\"Animation anim1 \\u003dnew AlphaAnimation(0.0f,1.0f); \nanim1.setDuration(1000);\nanim1.setStartOffset(100);\nanim1.setRepeatMode(Animation.REVERSE);\nanim1.setRepeatCount(Animation.INFINITE);\ntextview1.startAnimation(anim1);\",\"title\":\"Text Blink Animation\"},{\"code\":\"Add source 1\nPopupMenu popup \\u003d new PopupMenu(MainActivity.this, menu);\n\nMenu menu \\u003d popup.getMenu();\\r\nmenu.add(\\\"item1\\\").setIcon(R.drawable.icon1);\nmenu.add(\\\"item2\\\").setIcon(R.drawable.icon2);\n\npopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\npublic boolean onMenuItemClick(MenuItem item) {\\r\nswitch (item.getTitle().toString()) {\\r\ncase \\\"item1\\\":\n\nAdd source 2\nreturn true;\\r\ncase \\\" item2\\\":\n\nAdd source 3\nreturn true;\ndefault:\nreturn false;\\r\n}\\r\n}\\r\n});\",\"title\":\"Modren popup menu\"},{\"code\":\"Glide.with(getApplicationContext())\n     .load(R.raw.GIF name)\n     .into(imageview1);\",\"title\":\"Loading Gif Animation\"},{\"code\":\"edittext1.setSingleLine(true);\",\"title\":\"EditText Single line\"},{\"code\":\"//code for send otp on user mobile\n\ncom.google.firebase.auth.PhoneAuthProvider.getInstance().verifyPhoneNumber(phone, 60, java.util.concurrent.TimeUnit.SECONDS, this, mCallbacks);\n}\ncom.google.firebase.auth.PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks \\u003d new com.google.firebase.auth.PhoneAuthProvider.OnVerificationStateChangedCallbacks() {\n @Override\npublic void onVerificationCompleted(com.google.firebase.auth.PhoneAuthCredential phoneAuthCredential) {\n showMessage(\\\"Code has been sent to your Mobile !\\\");\n}\n @Override\npublic void onVerificationFailed(com.google.firebase.FirebaseException e) {\n showMessage(e.toString());\n}\n @Override\npublic void onCodeSent(String s, com.google.firebase.auth.PhoneAuthProvider.ForceResendingToken forceResendingToken) {\n super.onCodeSent(s, forceResendingToken);\n codeSent \\u003d s;\n}\n};\n{\n\n\n//code for verify otp\n\ncom.google.firebase.auth.PhoneAuthCredential credential \\u003d com.google.firebase.auth.PhoneAuthProvider.getCredential(codeSent, code);\nsignInWithPhoneAuthCredential(credential);\n}\nprivate void signInWithPhoneAuthCredential(com.google.firebase.auth.PhoneAuthCredential credential) {\nfauth.signInWithCredential(credential) .addOnCompleteListener(this, _fauth_sign_in_listener);\n}\n{\n\n\nCreated variable\n(1) phone\n(2) code\n(3) codeSent\",\"title\":\"OTP Verification\"},{\"code\":\"seekbar1.getThumb().setColorFilter(Color.parseColor(\\\"#00FF00FF\\\"), PorterDuff.Mode.SRC_IN);\",\"title\":\"Seekbar Dot gone\"},{\"code\":\"seekbar2.getThumb().setColorFilter(Color.parseColor(\\\"#FF000000\\\"), PorterDuff.Mode.SRC_IN);\",\"title\":\"Seekbar Dot Color\"},{\"code\":\"seekbar3.setThumb(getResources().getDrawable(R.drawable.icon));\",\"title\":\"Seekbar set icon\"},{\"code\":\"listview1.setSelector(R.drawable.your_icon_name);\",\"title\":\"Listview Selector \"},{\"code\":\"Animation animation1 \\u003d new AlphaAnimation(0.3f, 1.0f);\nanimation1.setDuration(4000);\n_param2.startAnimation(animation1);\n\",\"title\":\"Listview Click Animation\"},{\"code\":\"_fab.setCompatElevation(0f);\",\"title\":\"Fab Shadow\"},{\"code\":\"getSupportActionBar().setElevation(0);\",\"title\":\"ActionBar/Toolbar shadow\"},{\"code\":\"seekbar4.getProgressDrawable().setColorFilter(Color.parseColor(\\\"#FFEE58\\\"), PorterDuff.Mode.SRC_IN);\",\"title\":\"Seekbar Color\"},{\"code\":\"checkbox1.getButtonDrawable().setColorFilter(Color.parseColor(\\\"#FFEE58\\\"), PorterDuff.Mode.SRC_IN);\",\"title\":\"Checkbox Color\"},{\"code\":\"_view.setLayoutParams(new LinearLayout.LayoutParams((int)_width, (int)_height));\n\nMore block\nView\n(1) view\n\nNumber \n(2) width\n(3) height\n\",\"title\":\"View Width \\u0026 height\"},{\"code\":\"listview1.setFastScrollEnabled(true);\",\"title\":\"Listview Scroll fast\"},{\"code\":\"dialog_name.getWindow().setBackgroundDrawableResource(android.R.color.transparent);\",\"title\":\"Dialog Transparent\"},{\"code\":\"linecount\\u003dedittext1.getLineCount();\n\nCreate A Variable Number\n(1) linecount\",\"title\":\"Count Text lines\"}]";
		map = new Gson().fromJson(path, new TypeToken<ArrayList<HashMap<String, Object>>>(){}.getType());
		listview1.setAdapter(new Listview1Adapter(map));
		((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
		textview1.setText("Total Kod: ".concat(String.valueOf((long)(map.size()))));
	}
	
	
	public void _shape(final double _top1, final double _top2, final double _bottom2, final double _bottom1, final String _inside_color, final String _side_color, final double _side_size, final View _view) {
		Double tlr = _top1;
		Double trr = _top2;
		Double blr = _bottom2;
		Double brr = _bottom1;
		Double sw = _side_size;
		android.graphics.drawable.GradientDrawable s = new android.graphics.drawable.GradientDrawable();
		s.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
		s.setCornerRadii(new float[] {tlr.floatValue(),tlr.floatValue(), trr.floatValue(),trr.floatValue(), blr.floatValue(),blr.floatValue(), brr.floatValue(),brr.floatValue()}); 
		
		s.setColor(Color.parseColor(_inside_color));
		s.setStroke(sw.intValue(), Color.parseColor(_side_color));
		_view.setBackground(s);
	}
	
	public class Listview1Adapter extends BaseAdapter {
		
		ArrayList<HashMap<String, Object>> _data;
		
		public Listview1Adapter(ArrayList<HashMap<String, Object>> _arr) {
			_data = _arr;
		}
		
		@Override
		public int getCount() {
			return _data.size();
		}
		
		@Override
		public HashMap<String, Object> getItem(int _index) {
			return _data.get(_index);
		}
		
		@Override
		public long getItemId(int _index) {
			return _index;
		}
		
		@Override
		public View getView(final int _position, View _v, ViewGroup _container) {
			LayoutInflater _inflater = getLayoutInflater();
			View _view = _v;
			if (_view == null) {
				_view = _inflater.inflate(R.layout.javakodlari, null);
			}
			
			final LinearLayout linear4 = _view.findViewById(R.id.linear4);
			final LinearLayout linear1 = _view.findViewById(R.id.linear1);
			final LinearLayout linear2 = _view.findViewById(R.id.linear2);
			final TextView textview1 = _view.findViewById(R.id.textview1);
			final LinearLayout linear3 = _view.findViewById(R.id.linear3);
			final ImageView imageview1 = _view.findViewById(R.id.imageview1);
			final TextView textview2 = _view.findViewById(R.id.textview2);
			
			textview1.setText(map.get((int)_position).get("title").toString());
			textview2.setText(map.get((int)_position).get("code").toString());
			_shape(10, 10, 10, 10, "#ffffff", "#000000", 1, linear1);
			imageview1.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View _view) {
					((ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).setPrimaryClip(ClipData.newPlainText("clipboard", map.get((int)_position).get("code").toString()));
					SketchwareUtil.showMessage(getApplicationContext(), "Kod Kopyalandı");
				}
			});
			textview2.setTextIsSelectable(true);
			textview1.setTypeface(Typeface.createFromAsset(getAssets(),"fonts/poppins.ttf"), 1);
			textview2.setTypeface(Typeface.createFromAsset(getAssets(),"fonts/poppins.ttf"), 1);
			
			return _view;
		}
	}
	
	@Deprecated
	public void showMessage(String _s) {
		Toast.makeText(getApplicationContext(), _s, Toast.LENGTH_SHORT).show();
	}
	
	@Deprecated
	public int getLocationX(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[0];
	}
	
	@Deprecated
	public int getLocationY(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[1];
	}
	
	@Deprecated
	public int getRandom(int _min, int _max) {
		Random random = new Random();
		return random.nextInt(_max - _min + 1) + _min;
	}
	
	@Deprecated
	public ArrayList<Double> getCheckedItemPositionsToArray(ListView _list) {
		ArrayList<Double> _result = new ArrayList<Double>();
		SparseBooleanArray _arr = _list.getCheckedItemPositions();
		for (int _iIdx = 0; _iIdx < _arr.size(); _iIdx++) {
			if (_arr.valueAt(_iIdx))
			_result.add((double)_arr.keyAt(_iIdx));
		}
		return _result;
	}
	
	@Deprecated
	public float getDip(int _input) {
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, _input, getResources().getDisplayMetrics());
	}
	
	@Deprecated
	public int getDisplayWidthPixels() {
		return getResources().getDisplayMetrics().widthPixels;
	}
	
	@Deprecated
	public int getDisplayHeightPixels() {
		return getResources().getDisplayMetrics().heightPixels;
	}
}